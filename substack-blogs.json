{"status":"ok","feed":{"url":"https://sanjayofficial.substack.com/feed","title":"Tech Newsletter","link":"https://sanjayofficial.substack.com/","author":"Sanjay Mehta","description":"My personal Substack","image":"https://substackcdn.com/image/fetch/w_256,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fed45dfa0-af8f-4f62-88aa-ea651f831f3a_640x640.jpeg"},"items":[{"title":"Refactoring for the Future: Improving Code Without Changing Behavior","pubDate":"2025-03-25 10:00:37","link":"https://sanjayofficial.substack.com/p/refactoring-for-the-future-improving","guid":"https://sanjayofficial.substack.com/p/refactoring-for-the-future-improving","author":"Sanjay Mehta","thumbnail":"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png","description":"Writing Clean, Maintainable Code Through Refactoring","content":"\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png\" width=\"1422\" height=\"800\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":800,\"width\":1422,\"resizeWidth\":null,\"bytes\":null,\"alt\":\"Diagram showing red, green, refactor cycle. It marks refactor as done\",\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"Diagram showing red, green, refactor cycle. It marks refactor as done\" title=\"Diagram showing red, green, refactor cycle. It marks refactor as done\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></source></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\">\n<div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div>\n<div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div>\n</div></div>\n</div></a></figure></div>\n<h3><strong>What is Refactoring?</strong></h3>\n<p>Refactoring is the process of improving the internal structure of code without altering its external behavior.</p>\n<h3><strong>Why Refactoring is important?</strong></h3>\n<ul>\n<li><p>Makes code easier to read and maintain.</p></li>\n<li><p>Reduce Technical debt</p></li>\n<li><p>Improves collaboration in teams.</p></li>\n<li><p>Helps in scaling applications efficiently.</p></li>\n</ul>\n<h3><strong>When to Refactor?</strong></h3>\n<ul>\n<li><p>Before adding new features.</p></li>\n<li><p>After identifying code smells.</p></li>\n<li><p>During regular maintenance.</p></li>\n</ul>\n<div><hr></div>\n<h3><strong>What are Code Smells?</strong></h3>\n<p>These are the indicators of bad code. Some common ones:</p>\n<ol>\n<li>\n<p><strong>Duplicated Code</strong>\u00a0</p>\n<p><em>Duplicated code</em> is one of the worst smells, whenever a change is made, one needs to check if this should have happened to just one or all of the existing copies of code, wherever they are.</p>\n<p></p>\n</li>\n<li>\n<p><strong>Long Method</strong>\u00a0</p>\n<p>A method is doing too much. Like the Hotel California, something is always being added to a method but nothing is ever taken out. Since it\u2019s easier to write code than to read it, this \u201csmell\u201d remains unnoticed until the method turns into an ugly, oversized beast.</p>\n<p></p>\n</li>\n<li>\n<p><strong>Large Class</strong>\u00a0</p>\n<p>A class has too many responsibilities. It violates the single responsibility principle <strong>which states that a class should have only one reason to change.</strong> Many long-form methods and an abundant number of parameters that can be passed to a class cause <em>Large Class</em> problems.</p>\n<p></p>\n</li>\n<li>\n<p><strong>Divergent Change</strong></p>\n<p>Multiple reasons to change a single class. If adding a simple feature makes the developer change many seemingly unrelated methods inside a class, that indicates the <em>Divergent Change</em> code smell.</p>\n<p></p>\n</li>\n<li>\n<p><strong>Shotgun Surgery</strong>\u00a0</p>\n<p>A single change requires modifications in multiple places. Similar to <strong>Divergent Change</strong>, but with a broader spectrum, the smell symptom of the <em>Shotgun Surgery</em> code is detected by the unnecessary requirement of changing multiple different classes to introduce a single modification.</p>\n<p></p>\n</li>\n<li>\n<p><strong>Feature Envy</strong>\u00a0</p>\n<p> A method uses more data from another class than its own.If a method inside a class manipulates more features (be it fields or methods) of another class more than from its own, then this method has a <em>Feature Envy</em>.</p>\n<p>In <strong>Object-Oriented Programming</strong>, developers should tie the functionality and behavior close to the data it uses. Coupled objects have to be used together. </p>\n<p></p>\n</li>\n<li>\n<p><strong>Data Clumps</strong>\u00a0</p>\n<p>Groups of variables that always appear together. <em>Data Clumps</em> refer to a situation in which a few variables are passed around many times in the codebase instead of being packed into a separate object. Think of it as having to hold different groceries in a grocery store by hand instead of putting them into a basket.</p>\n<p></p>\n</li>\n<li>\n<p><strong>Primitive Obsession</strong>\u00a0</p>\n<p>Primitive Obsession is a <strong>code smell</strong> where primitive data types (e.g., int, string, boolean) are overused instead of creating domain-specific objects. This often leads to:</p>\n<ul>\n<li><p><strong>Scattered logic</strong> across the codebase</p></li>\n<li><p><strong>Lack of encapsulation</strong></p></li>\n<li><p><strong>High risk of errors</strong></p></li>\n</ul>\n<p></p>\n</li>\n<li>\n<p><strong>Switch Statements</strong>\u00a0</p>\n<p>Long\u00a0`if-else`\u00a0or\u00a0`switch`\u00a0statements that could be replaced by polymorphism. It violates the <strong>Open Closed Principle</strong>, which states \u201cSoftware entities (classes, modules, functions) should be open for extension, but closed for modification.\u201d</p>\n</li>\n</ol>\n<div><hr></div>\n<h3>Refactoring Techniques</h3>\n<p><em>Code</em> is a must-read for developers aiming to write better code. Here are<strong> </strong>the <strong>key refactoring techniques</strong> to fix the above code smells:</p>\n<h4>\n<strong>1. Extract Method</strong> </h4>\n<p>Move a block of code into a separate method.</p>\n<p>Extract Method comes under the category of <strong>Composing Methods (Improving Readability and Modularity) </strong>and this technique solves the problem of <strong>Duplicated Code</strong> and <strong>Long Method </strong>code smell<strong>.</strong></p>\n<p><strong>Problem</strong></p>\n<p>You have a code fragment that can be grouped together. The more lines found in a method, the harder it\u2019s to figure out what the method does. </p>\n<pre><code>void printOwing() {\n  printBanner();\n  System.out.println(\"name: \" + name);\n  System.out.println(\"amount: \" + getOutstanding());\n}</code></pre>\n<p><strong>Solution</strong></p>\n<p>Move this code to a separate new method (or function) and replace the old code with a call to the method.</p>\n<pre><code>void printOwing() {\n  printBanner();\n  printDetails(getOutstanding());\n}\n\nvoid printDetails(double outstanding) {\n  System.out.println(\"name: \" + name);\n  System.out.println(\"amount: \" + outstanding);\n}</code></pre>\n<p><strong>Break large methods into smaller, well-named methods</strong> to improve readability, maintainability, and reusability!</p>\n<h4><strong>2. Extract Class</strong></h4>\n<p>Split a class into multiple classes when it has too many responsibilities.</p>\n<p>Extract Class comes under the category of <strong>Moving Features Between Objects.</strong>This technique solves the problem of <strong>Duplicated Code</strong>, <strong>Long Class, Divergent Change and  Data Clumps </strong>code smell<strong>.</strong></p>\n<p>This refactoring technique will help maintain adherence to the <em>Single Responsibility Principle</em>. The code of your classes will be more obvious and understandable.</p>\n<p>Single-responsibility classes are more reliable and tolerant of changes. For example, say that you have a class responsible for ten different things. When you change this class to make it better for one thing, you risk breaking it for the nine others.</p>\n<p><strong>Problem</strong></p>\n<p>When one class does the work of two, awkwardness results.</p>\n<pre><code>class Person {\n   String name;\n   String officeAreaCode;\n   String officeNumber;\n\n   getTelephoneNumber() {}\n}  </code></pre>\n<p><strong>Solution</strong></p>\n<p>Instead, create a new class and place the fields and methods responsible for the relevant functionality in it.</p>\n<pre><code>class Person {\n   String name;\n   TelephoneNumber telephoneNumber;\n}  </code></pre>\n<pre><code>class TelephoneNumber {\n   String officeAreaCode;\n   String officeNumber;\n\n   getTelephoneNumber() {}\n}</code></pre>\n<p><strong>Break large classes into smaller, well-defined classes</strong> to improve <strong>modularity, readability, and maintainability</strong>!</p>\n<h4><strong>3. Move Method</strong></h4>\n<p>Shift a method to a more relevant class to improve cohesion.</p>\n<p>Move method comes under the category of <strong>Moving Features Between Objects </strong>and<strong> t</strong>his technique solves the problem of <strong>Shotgun Surgery</strong> <strong>and</strong> <strong>Feature Envy </strong>code smell<strong>.</strong></p>\n<p><strong>Problem</strong></p>\n<p>Here, the <strong>BankService</strong> class is calculating the account balance, even though <strong>BankAccount</strong> has all the data.</p>\n<pre><code>class BankAccount {\n    private double balance;\n    private double interestRate;\n\n    public BankAccount(double balance, double interestRate) {\n        this.balance = balance;\n        this.interestRate = interestRate;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public double getInterestRate() {\n        return interestRate;\n    }\n}\n\nclass BankService {\n    public double calculateInterest(BankAccount account) {\n        return account.getBalance() * account.getInterestRate();\n    }\n}</code></pre>\n<p><strong>Solution</strong></p>\n<p>We move calculateInterest<code>()</code> to BankAccount so it <strong>encapsulates its own behavior</strong>.</p>\n<pre><code>class BankAccount {\n    private double balance;\n    private double interestRate;\n\n    public BankAccount(double balance, double interestRate) {\n        this.balance = balance;\n        this.interestRate = interestRate;\n    }\n\n    public double calculateInterest() { \n        return balance * interestRate;\n    }\n}\n\nclass BankService {\n    public void printInterest(BankAccount account) {\n        System.out.println(\"Interest: \" + account.calculateInterest()); \n    }\n}</code></pre>\n<p>Always place behavior <strong>where the data lives</strong> to improve <strong>encapsulation and maintainability</strong>.</p>\n<h4><strong>4. Replace Conditional with Polymorphism</strong></h4>\n<p>Use object-oriented principles to eliminate long if-else or switch statements.</p>\n<p>It comes under the category of <strong>Simplifying Conditional Expressions </strong>and this technique solves the problem of <strong>switch or if-else statements </strong>code smell<strong>.</strong></p>\n<p><strong>Problem</strong></p>\n<p>The <strong>Employee</strong> class uses a <strong>switch statement</strong> to determine salary calculations based on employee type.</p>\n<pre><code>class Employee {\n    private String type;\n\n    public Employee(String type) {\n        this.type = type;\n    }\n\n    public double calculateSalary(double baseSalary) {\n        switch (type) {\n            case \"Manager\":\n                return baseSalary + 5000;\n            case \"Developer\":\n                return baseSalary + 2000;\n            case \"Intern\":\n                return baseSalary;\n            default:\n                throw new IllegalArgumentException(\"Unknown employee type\");\n        }\n    }\n}</code></pre>\n<p><strong>Solution</strong></p>\n<p>We <strong>replace the </strong>switch<strong> statement</strong> with <strong>inheritance and polymorphism</strong>.</p>\n<pre><code>// Step 1: Create an abstract base class\nabstract class Employee {\n    public abstract double calculateSalary(double baseSalary);\n}\n\n// Step 2: Implement specific employee types\nclass Manager extends Employee {\n    public double calculateSalary(double baseSalary) {\n        return baseSalary + 5000;\n    }\n}\n\nclass Developer extends Employee {\n    public double calculateSalary(double baseSalary) {\n        return baseSalary + 2000;\n    }\n}\n\nclass Intern extends Employee {\n    public double calculateSalary(double baseSalary) {\n        return baseSalary;\n    }\n}\n\n// Step 3: Use polymorphism in the main program\nclass Payroll {\n    public static void main(String[] args) {\n        Employee manager = new Manager();\n        Employee developer = new Developer();\n        Employee intern = new Intern();\n\n        System.out.println(\"Manager Salary: \" + manager.calculateSalary(50000));\n        System.out.println(\"Developer Salary: \" + developer.calculateSalary(50000));\n        System.out.println(\"Intern Salary: \" + intern.calculateSalary(50000));\n    }\n}</code></pre>\n<p><strong>Use polymorphism</strong> - Replace conditionals (switch or if-else) statements with object-oriented design patterns like <strong>Strategy or Factory Patterns</strong> to make code <strong>scalable, maintainable, and extensible</strong>.</p>\n<h4><strong>4. Value Objects</strong></h4>\n<p>A <strong>Value Object (VO)</strong> is an <strong>immutable object</strong> that represents a concept <strong>without identity</strong> (e.g., money, coordinates, dates). Unlike entities, <strong>two Value Objects are considered equal if their values match</strong>.</p>\n<p>It falls under the category of <strong>\"Composing Methods\"</strong> and <strong>\"Simplifying Conditional Expressions\" </strong>and<strong> </strong>this technique solves the problem of <strong>Primitive Obsession </strong>code smell.</p>\n<p><strong>Problem - Using Primitives Directly</strong></p>\n<pre><code>class Order {\n    private String currency;\n    private double amount;\n\n    public Order(String currency, double amount) {\n        this.currency = currency;\n        this.amount = amount;\n    }\n}</code></pre>\n<p><strong>Solution - Use Value Object</strong></p>\n<pre><code>final class Money {\n    private final double amount;\n    private final String currency;\n\n    public Money(double amount, String currency) {\n        if (amount &lt; 0) throw new IllegalArgumentException(\"Amount cannot be negative\");\n        if (!currency.matches(\"USD|EUR|INR\")) throw new IllegalArgumentException(\"Invalid currency\");\n        this.amount = amount;\n        this.currency = currency;\n    }\n}\n\nclass Order {\n    private Money totalPrice;\n\n    public Order(Money totalPrice) {\n        this.totalPrice = totalPrice;\n    }\n}</code></pre>\n<p><strong>Encapsulation</strong> : Money handles validation.<br><strong>Eliminates primitive obsession</strong> : No raw strings for currency.</p>\n<p><strong>Stop using primitives for domain concepts!</strong> Use <strong>Value Objects &amp; Encapsulation</strong> to make code <strong>robust &amp; maintainable</strong>.</p>\n<div><hr></div>\n<p>Thanks a lot, I hope this was helpful.</p>\n<h2>\ud83d\udc4b Let\u2019s connect</h2>\n<blockquote>\n<p>You can find me on <strong><a href=\"https://www.linkedin.com/in/sanjay-mehta-475280176/\">LinkedIn</a></strong>.</p>\n<p><em>If you like my content don\u2019t forget to subscribe and hit the like </em>\u2764\ufe0f<em> button at the bottom to help support me or share this with a friend. It keeps me motivated to share more content and help people to learn more. </em>\ud83d\ude4f</p>\n</blockquote>\n<p></p>\n<div class=\"subscription-widget-wrap-editor\" data-attrs='{\"url\":\"https://sanjayofficial.substack.com/subscribe?\",\"text\":\"Subscribe\",\"language\":\"en\"}' data-component-name=\"SubscribeWidgetToDOM\"><div class=\"subscription-widget show-subscribe\">\n<div class=\"preamble\"><p class=\"cta-caption\">Thanks for reading Tech Newsletter! Subscribe for free to receive new posts and support my work.</p></div>\n<div class=\"fake-input-wrapper\">\n<div class=\"fake-input\"></div>\n<div class=\"fake-button\"></div>\n</div>\n</div></div>\n<p></p>\n","enclosure":{"link":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https://substack-post-media.s3.amazonaws.com/public/images/3c673c11-1632-4255-b03f-5dd3394544ea_1422x800.png","type":"image/jpeg"},"categories":[]},{"title":"React.memo vs useMemo","pubDate":"2025-02-06 07:35:24","link":"https://sanjayofficial.substack.com/p/reactmemo-vs-usememo","guid":"https://sanjayofficial.substack.com/p/reactmemo-vs-usememo","author":"Sanjay Mehta","thumbnail":"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png","description":"Want to optimize performance of your application use memoization.","content":"\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png\" width=\"1456\" height=\"735\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/fab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":735,\"width\":1456,\"resizeWidth\":null,\"bytes\":319806,\"alt\":null,\"title\":null,\"type\":\"image/png\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></source></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\">\n<div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div>\n<div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div>\n</div></div>\n</div></a></figure></div>\n<p>In my earlier post, I have discussed the main differences between <strong><a href=\"https://sanjayofficial.substack.com/p/usecallback-vs-usememo?r=1tkdkn\">useCallback and useMemo</a></strong> and both are used for optimizing the performance of the React application. Similarly to that, React.memo is another component that is also used for improving the performance of the React application.</p>\n<div><hr></div>\n<h3><strong>What is Memoization?</strong></h3>\n<p>Memoization is not the new concept in computer science, it is used in various context, mainly in <strong>dynamic programming</strong> to cache the result for the same input in the recursion, so we don\u2019t need to call the expensive recursive method again to calculate the same value that we have encountered earlier and it will helps us to reduce the time complexity of the function and improve the overall performance of the system.</p>\n<p><strong>Memoization</strong> ensures that a method doesn't run for the same inputs more than once by keeping a record of the results for the given inputs (usually in a hash map).</p>\n<p>In React functional components, when props within a component change, the entire component re-renders by calling <strong>updateDOM</strong> function( <strong><a href=\"https://open.substack.com/pub/sanjayofficial/p/coming-soon?r=1tkdkn&amp;utm_campaign=post&amp;utm_medium=web&amp;showWelcomeOnShare=false\">Refer - What will happen when you call the setState function</a></strong><a href=\"https://open.substack.com/pub/sanjayofficial/p/coming-soon?r=1tkdkn&amp;utm_campaign=post&amp;utm_medium=web&amp;showWelcomeOnShare=false\"> </a>). In other words, if any value within a component updates, the entire component will re-render, including functions/components that have not had their values/props altered.</p>\n<blockquote><p>Now, with the new version of <strong>React 19</strong>, we don\u2019t need to do <strong>memoization</strong> anymore in our code, React will take care of optimizations using <strong><a href=\"https://react.dev/learn/react-compiler\">React Compiler</a></strong>, a new feature introduced in <strong>React 19</strong>.</p></blockquote>\n<div><hr></div>\n<h3>React.memo</h3>\n<p> <strong>memo</strong> lets you skip re-rendering a component when its props are unchanged.</p>\n<pre><code>const MemoizedComponent = memo(SomeComponent, arePropsEqual?)</code></pre>\n<h4><strong>Parameters</strong></h4>\n<ul>\n<li><p> The first parameter is the component that you want to memoize. The <strong>memo</strong> does not modify this component, but returns a new, memoized component instead. Any valid React component, including functions and <strong>forwardRef</strong> components, is accepted.</p></li>\n<li><p>The second parameter is <strong>optional</strong> : A function that accepts two arguments: the component\u2019s previous props, and its new props. It should return true if the old and new props are equal: that is, if the component will render the same output and behave in the same way with the new props as with the old. Otherwise it should return false. Usually, you will not specify this function. By default, React will compare each prop with Object.is.</p></li>\n</ul>\n<h4><strong>Returns</strong></h4>\n<p><strong>memo</strong> returns a new React component. It behaves the same as the component provided to <strong>memo</strong> except that React will not always re-render it when its parent is being re-rendered unless its props have changed.</p>\n<h4>Example - MemoizedProduct Component </h4>\n<pre><code>import { ProductType } from \"../context/ProductsProvider\"\nimport { ReducerActionType, ReducerAction } from \"../context/CartProvider\"\nimport { ReactElement, memo } from \"react\"\n\ntype <strong>ProductProps</strong> = {\n    product : ProductType,\n    dispatch : React.Dispatch&lt;ReducerAction&gt;,\n    REDUCER_ACTIONS : ReducerActionType\n}\n\nconst <strong>Product</strong> = ({product, dispatch, REDUCER_ACTIONS} : ProductProps) : ReactElement =&gt; {\n   const relativePath = \"../images/\" + product.sku + '.jpg';\n   const img: string = new URL(relativePath, import.meta.url).href\n\n   const onAddToCart = () =&gt; dispatch({type : REDUCER_ACTIONS.ADD , payload : {...product , qty : 1}});\n\n   const itemInCart = inCart ? ' Item in Cart ': null\n\n   const content = &lt;article className=\"product\"&gt;\n        &lt;h3&gt;{product.name}&lt;/h3&gt;\n        &lt;img src={img} alt={product.name} className=\"product__img\"/&gt;\n        &lt;p&gt;{new Intl.NumberFormat('en-US', { style : 'currency', currency : 'USD' }).format(product.price)}\n        {itemInCart}&lt;/p&gt;\n        &lt;button onClick={onAddToCart}&gt;Add to Cart&lt;/button&gt;\n   &lt;/article&gt;\n\n    return content;\n}\n\nfunction <strong>areProductsEqual</strong>({product : prevProduct} : ProductProps,{product : nextProduct} : ProductProps) {\n    return Object.keys(prevProduct).every(key =&gt; {\n        return prevProduct[key as keyof ProductType] === nextProduct[key as keyof ProductType]\n    }) \n}\n\nconst <strong>MemoizedProduct</strong> = <strong>memo</strong>&lt;typeof Product&gt;(<strong>Product</strong>, <strong>areProductsEqual</strong>)\n\nexport default <strong>MemoizedProduct</strong></code></pre>\n<div><hr></div>\n<h3>useMemo</h3>\n<p><strong>useMemo</strong> is a React Hook that lets you <strong>cache the result of a calculation</strong> between re-renders.</p>\n<p>Same as useCallback, we should define the <strong>useMemo</strong> at the top level of the component.</p>\n<pre><code><code>const memoizedValue = useMemo(() =&gt; expensiveFunction(), [dependency]);</code></code></pre>\n<h3>Parameters:</h3>\n<ul>\n<li><p>The first argument is the function <strong>calculating the value that you want to cache</strong>. It should be pure, should take no arguments, and should return a value of any type. <strong>React will call your function during the initial render.</strong></p></li>\n<li><p>The second argument is an array of dependencies that determines when the value should be recalculated. React will return the same value again if the <strong>dependencies</strong> have not changed since the last render. Otherwise, it will call the function, return its result, and store it so it can be reused later. React will compare each dependency with its previous value using the <strong>Object.is</strong> comparison.</p></li>\n</ul>\n<h4><strong>Example 1: useMemo without dependency.</strong></h4>\n<pre><code><code>import React, { useState, useMemo } from 'react';\n\nconst ExpensiveComponent = () =&gt; {\n    const [count, setCount] = useState(0);\n\n    const computedValue = useMemo(() =&gt; {\n        console.log(\"Computing expensive value...\");\n        return count * 2;\n    }, []); \n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Computed Value: {computedValue}&lt;/h1&gt;\n            &lt;p&gt;Count: {count}&lt;/p&gt;\n            &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment   Count&lt;/button&gt;\n      &lt;/div&gt;\n    );\n};\n\nexport default ExpensiveComponent;</code></code></pre>\n<p>In this example, we are passing dependencies as an empty array, that means caching a value that should only be computed once.</p>\n<h4><strong>Example 2: useMemo with dependency.</strong></h4>\n<pre><code><code>import React, { useState, useMemo } from 'react';\n\nconst ExpensiveComponent = () =&gt; {\n    const [count, setCount] = useState(0);\n    const [items, setItems] = useState([1, 2, 3, 4, 5]);\n\n    const expensiveCalculation = (items) =&gt; {\n        console.log(\"Calculating...\");\n        return items.reduce((sum, item) =&gt; sum + item, 0);\n    };\n\n    const memoizedCalculation = useMemo(() =&gt; expensiveCalculation(items), [items]);\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Expensive Calculation Example&lt;/h1&gt;\n            &lt;p&gt;Sum of items: {memoizedCalculation}&lt;/p&gt;\n            &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment Count&lt;/button&gt;\n            &lt;button onClick={() =&gt; setItems([...items, Math.random()])}&gt;Add Random Item&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default ExpensiveComponent;</code></code></pre>\n<p>In this example, dependency is on <strong>items, </strong>so function will be called again to calculate a new value when items state updates.</p>\n<div><hr></div>\n<h3>\n<strong>Differences between </strong><code>useMemo</code><strong> and </strong><code>memo.</code>\n</h3>\n<p>Let's summarize the differences between the two:</p>\n<ul>\n<li><p><strong>Purpose : useMemo</strong> caches the return value of a function whereas <strong>memo</strong> caches the component.</p></li>\n<li><p><strong>When to use : useMemo</strong> is used when you have an expensive calculation you want to avoid on every render. <strong>memo</strong> is used to cache the component to avoid re-rendering.</p></li>\n<li><p><strong>Dependencies : useMemo</strong> makes sure that an expensive function should only be called for changed dependencies. <strong>memo</strong> re-renders the component when the dependencies change.</p></li>\n<li><p><strong>Common use case : useMemo </strong>hook<strong> </strong>cache results of expensive calculations or data processing. Wrap a component in <strong>memo</strong> to get a <em>memoized</em> version of that component.</p></li>\n</ul>\n<blockquote><p><strong>Memoization is a performance optimization, not a guarantee</strong>. React may still re-render the memoized version of your component.</p></blockquote>\n<div><hr></div>\n<h3><strong>Summary:</strong></h3>\n<ul>\n<li><p><strong>useMemo</strong> memoizes the <strong>result</strong> of an expensive computation and only recomputes it when the <strong>dependencies</strong> change.</p></li>\n<li><p><strong>memo </strong>memoizes the <strong>component usually child component</strong> and only re-renders the component when the <strong>dependencies</strong> change.</p></li>\n<li><p><strong>useMemo </strong>is useful for avoiding expensive recalculations on every render.</p></li>\n<li><p><strong>memo </strong>is useful for avoiding re-rendering the component on every render.</p></li>\n<li><p>You should only use <strong>useMemo</strong> and <strong>memo</strong> it for <strong>performance optimizations</strong> when you notice performance bottlenecks.</p></li>\n<li><p>Using <strong>memo </strong>is not a guarantee, React may still re-render the memoized version of your component.</p></li>\n</ul>\n<div><hr></div>\n<p>In the upcoming post, we will discuss more about new features of <strong>React 19</strong> like <strong>useFormStatus</strong> hook and <strong>React compiler.</strong> </p>\n<p>Stay tuned! Thanks for reading.</p>\n<h2>\ud83d\udc4b Let\u2019s connect</h2>\n<blockquote>\n<p>You can find me on <strong><a href=\"https://www.linkedin.com/in/sanjay-mehta-475280176/\">LinkedIn</a></strong>.</p>\n<p><em>If you like my content don\u2019t forget to subscribe and hit the like </em>\u2764\ufe0f<em> button at the bottom to help support me or share this with a friend. It keeps me motivated to share more content and help people to learn more. </em>\ud83d\ude4f</p>\n</blockquote>\n<p></p>\n<p class=\"button-wrapper\" data-attrs='{\"url\":\"https://sanjayofficial.substack.com/subscribe?\",\"text\":\"Subscribe now\",\"action\":null,\"class\":null}' data-component-name=\"ButtonCreateButton\"><a class=\"button primary\" href=\"https://sanjayofficial.substack.com/subscribe?\"><span>Subscribe now</span></a></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n","enclosure":{"link":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https://substack-post-media.s3.amazonaws.com/public/images/fab1724e-b272-4ddd-b59b-89a41bdf0fa2_2228x1124.png","type":"image/jpeg"},"categories":[]},{"title":"useCallback vs useMemo","pubDate":"2025-02-03 20:41:52","link":"https://sanjayofficial.substack.com/p/usecallback-vs-usememo","guid":"https://sanjayofficial.substack.com/p/usecallback-vs-usememo","author":"Sanjay Mehta","thumbnail":"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png","description":"You should only rely on useMemo or useCallback hook as a performace optimization.","content":"\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png\" width=\"728\" height=\"440.78125\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png\",\"srcNoWatermark\":null,\"fullscreen\":false,\"imageSize\":\"normal\",\"height\":620,\"width\":1024,\"resizeWidth\":728,\"bytes\":null,\"alt\":\"\",\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" title=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></source></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\">\n<div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div>\n<div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div>\n</div></div>\n</div></a></figure></div>\n<p>In this post, we are going to discuss useCallback and useMemo hooks and the differences between them.</p>\n<div><hr></div>\n<h2><strong>The useCallback Hook</strong></h2>\n<p><strong>useCallback</strong> is a React Hook that lets you <strong>cache a function definition</strong> between re-renders.</p>\n<p>Like every hook, we need to define at the top level of the component, you should define the <strong>useCallback</strong> at the top level of your component.</p>\n<pre><code>const memoizedCallback = useCallback(() =&gt; {\n    // callback logic here\n}, [dependencies]);</code></pre>\n<h3>Parameters:</h3>\n<ul>\n<li><p>The first argument is the function value that you want to cache. It can take any arguments and return any values. React will return (not call!) your function back to you during the initial render. The function is returned to you so you can decide when and whether to call it.</p></li>\n<li><p>The second argument is an array of dependencies that determines when the function should be recreated. React will give you the same function again if the dependencies have not changed since the last render. Otherwise, it will recreate the function and store it in case it can be reused later.</p></li>\n</ul>\n<h4><strong>Example 1: useCallback without dependency.</strong></h4>\n<pre><code>import React, { useState, useCallback } from 'react';\n\nconst Counter = () =&gt; {\n    const [count, setCount] = useState(0);\n\n    const increment = useCallback(() =&gt; {\n        setCount(prevCount =&gt; prevCount + 1);\n    }, []);\n\n    return (\n        &lt;div&gt;\n            &lt;p&gt;Count: {count}&lt;/p&gt;\n            &lt;button onClick={increment}&gt;Increment&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};</code></pre>\n<p>In this example, we are passing dependencies as an empty array, that means the function is only created once.</p>\n<h4><strong>Example 2: useCallback with dependencies.</strong></h4>\n<pre><code>import React, { useState, useCallback } from 'react';\n\nconst Counter = () =&gt; {\n    const [count, setCount] = useState(0);\n    const [name, setName] = useState(\"React\");\n\n    const increment = useCallback(() =&gt; {\n        setCount(prevCount =&gt; prevCount + 1);\n        console.log(`Count updated: ${count}`);\n    }, [count]); \n\n    const changeName = () =&gt; {\n        setName(name === \"React\" ? \"Vite\" : \"React\");\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;{name} Counter&lt;/h1&gt;\n            &lt;p&gt;Current Count: {count}&lt;/p&gt;\n            &lt;button onClick={increment}&gt;Increment&lt;/button&gt;\n            &lt;button onClick={changeName}&gt;Change Name&lt;/button&gt;\n       &lt;/div&gt;\n    );\n};\n\nexport default Counter;</code></pre>\n<p>In this example, dependency is on <strong>count, </strong>so function will only recreates when count updates.</p>\n<div><hr></div>\n<h2><strong>The useMemo Hook</strong></h2>\n<p><strong>useMemo</strong> is a React Hook that lets you <strong>cache the result of a calculation</strong> between re-renders.</p>\n<p>Same as useCallback, we should define the <strong>useMemo</strong> at the top level of the component.</p>\n<pre><code>const memoizedValue = useMemo(() =&gt; expensiveFunction(), [dependency]);</code></pre>\n<h3>Parameters:</h3>\n<ul>\n<li><p>The first argument is the function <strong>calculating the value that you want to cache</strong>. It should be pure, should take no arguments, and should return a value of any type. <strong>React will call your function during the initial render.</strong> </p></li>\n<li><p>The second argument is an array of dependencies that determines when the value  should be recalculated. React will return the same value again if the <strong>dependencies</strong> have not changed since the last render. Otherwise, it will call the function, return its result, and store it so it can be reused later. React will compare each dependency with its previous value using the <strong>Object.is</strong> comparison.</p></li>\n</ul>\n<h4><strong>Example 1: useMemo without dependency.</strong></h4>\n<pre><code>import React, { useState, useMemo } from 'react';\n\nconst ExpensiveComponent = () =&gt; {\n    const [count, setCount] = useState(0);\n\n    const computedValue = useMemo(() =&gt; {\n        console.log(\"Computing expensive value...\");\n        return count * 2;\n    }, []); \n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Computed Value: {computedValue}&lt;/h1&gt;\n            &lt;p&gt;Count: {count}&lt;/p&gt;\n            &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment   Count&lt;/button&gt;\n      &lt;/div&gt;\n    );\n};\n\nexport default ExpensiveComponent;</code></pre>\n<p>In this example, we are passing dependencies as an empty array, that means caching a value that should only be computed once.</p>\n<h4><strong>Example 2: useMemo with dependency.</strong></h4>\n<pre><code>import React, { useState, useMemo } from 'react';\n\nconst ExpensiveComponent = () =&gt; {\n    const [count, setCount] = useState(0);\n    const [items, setItems] = useState([1, 2, 3, 4, 5]);\n\n    const expensiveCalculation = (items) =&gt; {\n        console.log(\"Calculating...\");\n        return items.reduce((sum, item) =&gt; sum + item, 0);\n    };\n\n    const memoizedCalculation = useMemo(() =&gt; expensiveCalculation(items), [items]);\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Expensive Calculation Example&lt;/h1&gt;\n            &lt;p&gt;Sum of items: {memoizedCalculation}&lt;/p&gt;\n            &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment Count&lt;/button&gt;\n            &lt;button onClick={() =&gt; setItems([...items, Math.random()])}&gt;Add Random Item&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default ExpensiveComponent;</code></pre>\n<p>In this example, dependency is on <strong>items, </strong>so function will be called again to calculate a new value when items state updates.</p>\n<div><hr></div>\n<h3>\n<strong>Differences Between </strong><code>useMemo</code><strong> and </strong><code>useCallback</code>\n</h3>\n<p>Let's summarize the differences between the two hooks:</p>\n<ul>\n<li><p><strong>Purpose : useMemo</strong> caches the return value of a function whereas <strong>useCallback</strong> caches the function definition itself.</p></li>\n<li><p><strong>When to use : useMemo</strong> is used when you have an expensive calculation you want to avoid on every render. <strong>useCallback</strong> is used to cache a function to avoid re-creating it on every re-render.</p></li>\n<li><p><strong>Dependencies : useMemo</strong> makes sure that an expensive function should only be called for changed dependencies. <strong>useCallback</strong> re-creates function when the dependencies change.</p></li>\n<li><p><strong>Common use case : useMemo </strong>hook<strong> </strong>cache results of expensive calculations or data processing. <strong>useCallback </strong>passing memoized functions to child components.</p></li>\n</ul>\n<div><hr></div>\n<h3>Summary:</h3>\n<ul>\n<li><p><strong>useMemo</strong> memoizes the <strong>result</strong> of an expensive computation and only recomputes it when the <strong>dependencies</strong> change.</p></li>\n<li><p><strong>useCallback </strong>memoizes the <strong>function definition</strong> and only recreates the function when the <strong>dependencies</strong> change.</p></li>\n<li><p><strong>useMemo </strong>is useful for avoiding expensive recalculations on every render.</p></li>\n<li><p><strong>useCallback </strong>is useful for avoiding recreating the function on every render.</p></li>\n<li><p>You should only use <strong>useMemo</strong> and <strong>useCallback</strong> it for <strong>performance optimizations</strong> when you notice performance bottlenecks.</p></li>\n</ul>\n<div><hr></div>\n<p>Thanks a lot, I hope this was helpful.</p>\n<h2>\ud83d\udc4b Let\u2019s connect</h2>\n<blockquote>\n<p>You can find me on <strong><a href=\"https://www.linkedin.com/in/sanjay-mehta-475280176/\">LinkedIn</a></strong>.</p>\n<p><em>If you like my content don\u2019t forget to subscribe and hit the like </em>\u2764\ufe0f<em> button at the bottom to help support me or share this with a friend. It keeps me motivated to share more content and help people to learn more. </em>\ud83d\ude4f</p>\n</blockquote>\n<p></p>\n<div class=\"subscription-widget-wrap-editor\" data-attrs='{\"url\":\"https://sanjayofficial.substack.com/subscribe?\",\"text\":\"Subscribe\",\"language\":\"en\"}' data-component-name=\"SubscribeWidgetToDOM\"><div class=\"subscription-widget show-subscribe\">\n<div class=\"preamble\"><p class=\"cta-caption\">Thanks for reading Tech Newsletter! Subscribe for free to receive new posts and support my work.</p></div>\n<div class=\"fake-input-wrapper\">\n<div class=\"fake-input\"></div>\n<div class=\"fake-button\"></div>\n</div>\n</div></div>\n","enclosure":{"link":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https://substack-post-media.s3.amazonaws.com/public/images/944a9469-e5c5-4cb6-9037-94f70260a8e7_1024x620.png","type":"image/jpeg"},"categories":[]},{"title":"How useState hook works under the hood.","pubDate":"2024-11-14 14:27:01","link":"https://sanjayofficial.substack.com/p/coming-soon","guid":"https://sanjayofficial.substack.com/p/coming-soon","author":"Sanjay Mehta","thumbnail":"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png","description":"React hooks are not magic, they are just Arrays.","content":"\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2 is-viewable-img\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png\" width=\"1200\" height=\"800\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/2931b62e-9333-4932-a015-4516f25826d2_1200x800.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":800,\"width\":1200,\"resizeWidth\":null,\"bytes\":320260,\"alt\":null,\"title\":null,\"type\":\"image/png\",\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F2931b62e-9333-4932-a015-4516f25826d2_1200x800.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></source></picture><div class=\"image-link-expand\"><div class=\"pencraft pc-display-flex pc-gap-8 pc-reset\">\n<div class=\"pencraft pc-reset icon-container restack-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-refresh-cw\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"></path><path d=\"M21 3v5h-5\"></path><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"></path><path d=\"M8 16H3v5\"></path></svg></div>\n<div class=\"pencraft pc-reset icon-container view-image\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-maximize2\"><polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" x2=\"14\" y1=\"3\" y2=\"10\"></line><line x1=\"3\" x2=\"10\" y1=\"21\" y2=\"14\"></line></svg></div>\n</div></div>\n</div></a></figure></div>\n<div><hr></div>\n<blockquote><p><strong>Let\u2019s first try to understand some basic concepts before going into the depth of hook.</strong></p></blockquote>\n<h2><strong>Hooks in React</strong></h2>\n<p><strong>In React, useState, as well as any other function starting with \u201cuse\u201d, is called a Hook.</strong></p>\n<p>There are some limitations, where we need to use hook in our component.</p>\n<ol><li><p><strong>Hooks can only be called at the top level of your components or your custom hooks.</strong></p></li></ol>\n<pre><code><code>function MyButton() {\n    const [count, setCount] = useState(0);\n    // ...</code></code></pre>\n<ol start=\"2\"><li><p><strong>Don\u2019t call Hooks inside loops, conditions, nested functions or inside a map call.</strong></p></li></ol>\n<pre><code><code>&lt;ul&gt;\n    {items.map((item) =&gt; {\n        // Doesn't work!\n        const ref = useRef(null);\n        return &lt;li ref={ref} /&gt;;\n    })} \n&lt;/ul&gt;;</code></code></pre>\n<blockquote><p>You should <strong>use</strong> React features at the top of your component similar to how you <strong>import</strong> modules at the top of your file.</p></blockquote>\n<div><hr></div>\n<h3>useState Hook</h3>\n<h4>What is state in React and why do we need state in our component?</h4>\n<p>Components often need to change what\u2019s on the screen as a result of an interaction. Typing into the form should update the input field, clicking <strong>next</strong> on an image carousel should change which image is displayed, clicking <strong>buy</strong> should put a product in the shopping cart.</p>\n<div class=\"pullquote\"><p> Components need to <strong>remember</strong> things: the <strong>current input value</strong>, the <strong>current image</strong>, the <strong>shopping cart</strong>. In React, this kind of component-specific <strong>memory</strong> is called <strong>state</strong>.</p></div>\n<p>To update a component with new data, two things need to happen:</p>\n<p>1. <strong>Retain</strong>\u00a0the data between renders.</p>\n<p>2. <strong>Trigger</strong>\u00a0React to render the component with new data (re-rendering).</p>\n<p>The <strong>useState</strong> Hook provides those two things:</p>\n<p>1. A\u00a0<strong>state variable</strong>\u00a0to retain the data between renders.</p>\n<p>2. A\u00a0<strong>state setter function</strong>\u00a0to update the variable and trigger React to render the component again.</p>\n<pre><code><code>const [index, setIndex] = useState(0);</code></code></pre>\n<p>In this case, you want React to remember <strong>index</strong>.</p>\n<p>The convention is to name this pair like <strong>const [something, setSomething]</strong>. You could name it anything you like, but conventions make things easier to understand across projects.</p>\n<p>The only argument to <strong>useState</strong> is the <strong>initial value</strong> of your state variable. In this example, the <strong>index\u2019s initial value</strong> is set to <strong>0</strong> with <strong>useState(0)</strong>.</p>\n<h3>What happens when you update the state?</h3>\n<p>Let\u2019s take the same index example to understand.</p>\n<p><strong>1. Your component renders the first time.</strong>\u00a0Because you passed\u00a0<strong>0</strong>\u00a0to\u00a0<strong>useState</strong>\u00a0as the initial value for\u00a0<strong>index</strong>, it will return\u00a0<strong>[0, setIndex]</strong>. React remembers\u00a0<strong>0</strong>\u00a0is the latest state value.</p>\n<p><strong>2. You update the state.</strong>\u00a0When a user clicks the button, it calls\u00a0<strong>setIndex(index + 1)</strong>.\u00a0<strong>index</strong>\u00a0is\u00a0<strong>0</strong>, so it\u2019s\u00a0<strong>setIndex(1)</strong>. This tells React to remember\u00a0<strong>index</strong>\u00a0is\u00a0<strong>1</strong>\u00a0now and triggers another render.</p>\n<p><strong>3. Your component\u2019s second render.</strong>\u00a0React still sees\u00a0<strong>useState(0)</strong>, but because React\u00a0<strong>remembers</strong>\u00a0that you set\u00a0<strong>index</strong>\u00a0to\u00a0<strong>1</strong>, it returns\u00a0<strong>[1, setIndex]</strong>\u00a0instead.</p>\n<p>4. And so on!</p>\n<div><hr></div>\n<h3>Let\u2019s dive into deeper concept of how useState works under the hood.</h3>\n<p></p>\n<h4>\n<strong>How does React know which state to return?</strong>\u00a0</h4>\n<p>There is no <strong>identifier</strong> that is passed to <strong>useState</strong>, so how does it know which of the state variables to return?</p>\n<p>Internally, React holds <strong>an array of state pairs</strong> for every component. It also maintains the <strong>current pair index</strong>, which is set to <strong>0</strong> before rendering. Each time you call <strong>useState</strong>, React gives you the <strong>next state pair and increments the index.</strong></p>\n<p>Note - It\u2019s just gives an idea of how react <strong>useState</strong> hook works internally, real implementation may differ. </p>\n<h4>useState function</h4>\n<pre><code><code>let componentHooks = [];\nlet currentHookIndex = 0;\n\nfunction useState(initialState) {\n    let pair = componentHooks[currentHookIndex];\n    if (pair) {\n        currentHookIndex++;\n        return pair;\n    }\n    pair = [initialState, setState];\n    function setState(nextState) {\n        pair[0] = nextState;\n        updateDOM();\n    }    \n    componentHooks[currentHookIndex] = pair;\n    currentHookIndex++;\n    return pair;\n}</code></code></pre>\n<h4>updateDom function</h4>\n<pre><code><code>function updateDOM() {\n    currentHookIndex = 0;\n    let output = ArtistGallery();\n\n    nextButton.onclick = output.onNextClick;\n    header.textContent = output.header;\n    image.src = output.imageSrc;\n    image.alt = output.imageAlt;\n}</code></code></pre>\n<h4>ArtistGallery Component</h4>\n<pre><code><code>function ArtistGallery() {\n    const [index, setIndex] = useState(0);\n    function handleNextClick() {\n        setIndex(index + 1);\n    }   \n    let image = imageList[index];\n    return {\n        onNextClick: handleNextClick,\n        header: `${image.name} by ${image.artist}`,\n        counter: `${index + 1} of ${imageList.length}`,\n        imageSrc: imageList.url,\n        imageAlt: imageList.alt\n    };\n}</code></code></pre>\n<h4>demo.js file</h4>\n<pre><code><code>let nextButton = document.getElementById('nextButton');\nlet header = document.getElementById('header');\nlet image = document.getElementById('image');\n\nlet imageList = [{\n    name: 'Homenaje a la Neurocirug\u00eda',\n    artist: 'Marta Colvin Andrade',\n    url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n    alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n    },{\n    name: 'Floralis Gen\u00e9rica',\n    artist: 'Eduardo Catalano',\n    url: 'https://i.imgur.com/ZF6s192m.jpg',\n    alt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n    },{\n    name: 'Eternal Presence',\n    artist: 'John Woodrow Wilson',\n    url: 'https://i.imgur.com/aTtVpES.jpg',\n    alt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n    }];\n\nupdateDOM();</code></code></pre>\n<h4>Let\u2019s try to understand this code step by step.</h4>\n<h4>useState function</h4>\n<ol><li><p><strong>As component can use multiple hooks so, it creates an array of component hooks and the current hook index variable and set the initial value to 0.</strong></p></li></ol>\n<pre><code><code>let componentHooks = [];\nlet currentHookIndex = 0;</code></code></pre>\n<ol start=\"2\"><li><p><strong>React checks if this is not the first render, it returns the existing state pair and prepare for the next hook call.</strong></p></li></ol>\n<pre><code><code>let pair = componentHooks[currentHookIndex];\nif (pair) {\n    currentHookIndex++;\n    return pair;\n}</code></code></pre>\n<ol start=\"3\"><li><p><strong>If this is the first time we\u2019re rendering react create a new state pair and store the pair for future renders and prepare for the next hook call.</strong></p></li></ol>\n<pre><code><code>pair = [initialState, setState];\ncomponentHooks[currentHookIndex] = pair;\ncurrentHookIndex++;\nreturn pair;</code></code></pre>\n<p><strong>4.  Updating the state using set state function. When the user requests a state change, react put the new value into the pair.</strong></p>\n<pre><code><code>function setState(nextState) { \n    pair[0] = nextState;\n    updateDOM();\n}</code></code></pre>\n<ol start=\"5\"><li><p><strong>When the user requests for state change, it also triggers the updateDOM() function. The updateDOM function resets the value of the currentHookIndex to 0  and assign the new values which is returned from the component.</strong></p></li></ol>\n<pre><code><code>currentHookIndex = 0;\nlet output = ArtistGallery();\nnextButton.onclick = output.onNextClick;\nheader.textContent = output.header;\nimage.src = output.imageSrc;\nimage.alt = output.imageAlt;</code></code></pre>\n<h4>ArtistGallery Component</h4>\n<p><strong>ArtistGallery component using the useState function and initializing the index value to 0. In this example we\u2019re not using React so, this component returns object as the output instead of JSX.</strong></p>\n<pre><code><code>return {     \n    onNextClick: handleNextClick,\n    header: `${image.name} by ${image.artist}`,\n    counter: `${index + 1} of ${imageList.length}`,\n    imageSrc: imageList.url,   \n    imageAlt: imageList.alt\n};</code></code></pre>\n<h4>demo.js file</h4>\n<p><strong>This file is created to make the UI match with the initial state by calling the updateDOM() function initially.</strong></p>\n<pre><code><code>let nextButton = document.getElementById('nextButton');\nlet header = document.getElementById('header');\nlet image = document.getElementById('image');\n\nlet imageList = [{\n    name: 'Homenaje a la Neurocirug\u00eda',\n    artist: 'Marta Colvin Andrade',\n    url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n    alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'\n    },{\n    name: 'Floralis Gen\u00e9rica',\n    artist: 'Eduardo Catalano',\n    url: 'https://i.imgur.com/ZF6s192m.jpg',\n    alt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n    },{\n    name: 'Eternal Presence',\n    artist: 'John Woodrow Wilson',\n    url: 'https://i.imgur.com/aTtVpES.jpg',\n    alt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n    }];\n\nupdateDOM();</code></code></pre>\n<div><hr></div>\n<h4>Summary </h4>\n<ul>\n<li><p>If you want your component to remember some information between renders use <strong>state.</strong></p></li>\n<li><p>Hooks are special functions that start with\u00a0<strong>use</strong>.</p></li>\n<li><p>The\u00a0<strong>useState</strong>\u00a0Hook returns a <strong>pair of values</strong>: the <strong>current state</strong> and the <strong>function to update it</strong>.</p></li>\n<li><p>You can have <strong>more than one state variable</strong>. Internally, React matches them up by their order.</p></li>\n</ul>\n<p>Thanks a lot, I hope this was helpful.</p>\n<h2>\ud83d\udc4b Let\u2019s connect</h2>\n<blockquote>\n<p>You can find me on <strong><a href=\"https://www.linkedin.com/in/sanjay-mehta-475280176/\">LinkedIn</a></strong>.</p>\n<p><em>If you like my content don\u2019t forget to subscribe and hit the like </em>\u2764\ufe0f<em> button at the bottom to help support me or share this with a friend. It keeps me motivated to share more content and help people to learn more. </em>\ud83d\ude4f</p>\n</blockquote>\n<p></p>\n<p class=\"button-wrapper\" data-attrs='{\"url\":\"https://sanjayofficial.substack.com/subscribe?\",\"text\":\"Subscribe now\",\"action\":null,\"class\":null}' data-component-name=\"ButtonCreateButton\"><a class=\"button primary\" href=\"https://sanjayofficial.substack.com/subscribe?\"><span>Subscribe now</span></a></p>\n","enclosure":{"link":"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https://substack-post-media.s3.amazonaws.com/public/images/2931b62e-9333-4932-a015-4516f25826d2_1200x800.png","type":"image/jpeg"},"categories":[]},{"title":"Principals of Reliable Applications","pubDate":"2024-01-12 05:35:35","link":"https://sanjayofficial.substack.com/p/principals-of-reliable-applications-64970c07610e","guid":"https://sanjayofficial.substack.com/p/principals-of-reliable-applications-64970c07610e","author":"Sanjay Mehta","thumbnail":"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg","description":"A reliable distributed system is composed of reliable applications.","content":"\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F309d0d85-8d3d-4d3c-ab2a-ec728e5dfcea_800x618.jpeg 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></source></picture><div></div>\n</div></a></figure></div>\n<blockquote><p>A reliable distributed system is composed of reliable applications.</p></blockquote>\n<p>Reliable applications have several positive properties, and these properties help us when we\u2019re building distributed systems, but they\u2019re also good just on their own. Some of these properties are <strong>idempotence</strong>, <strong>immutability</strong>, <strong>location independence</strong>, and <strong>versioning</strong>.</p>\n<h4><strong>Idempotence</strong></h4>\n<blockquote><p>Idempotence is a property that helps us to tolerate unreliable networks.</p></blockquote>\n<p>When the network is unreliable, the client might have to retry, and an idempotent application won\u2019t duplicate the effect if it receives a duplicate message.</p>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F51ba10c8-bd2c-4447-b6bf-d705ed946d33_800x648.png 1456w\" sizes=\"100vw\"></source></picture><div></div>\n</div></a></figure></div>\n<p><strong>Problems with CRUD</strong></p>\n<p><strong>CRUD</strong> stands for create, read, update, and delete. These are four operations that you can use in order to create and modify entities within your system. The default position for mapping these four operations onto a RESTful API is to map <strong>create</strong> to <strong>POST</strong>, <strong>read</strong> to <strong>GET</strong>, <strong>update</strong> to <strong>PUT</strong>, and <strong>delete</strong>, of course, to <strong>DELETE</strong>.</p>\n<p>Now the problem with that default mapping has to do with idempotence. In REST, the PUT and DELETE verbs are specified to be <strong>idempotent</strong>, but POST is not <strong>idempotent</strong>. An <strong>idempotent</strong> operation is one that will have no effect if it is received a second time. So, for example, if you were to PUT some contents to a resource and then repeat that PUT, the second one wouldn\u2019t change the contents. POST, however, is not guaranteed to be idempotent by default. That means if you were to POST to a resource twice, you would end up with two different entities.</p>\n<p>Remember, the <strong>network</strong> is <strong>unreliable</strong>. Let\u2019s see what happens with a typical API when the client has to retry. Let\u2019s say that the client wants to create a new employee, and so they\u2019re going to POST to the /employees resource. The first time the server is going to insert into the Employee table and then come up with the new unique ID of 37. This is an <strong>auto\u2011incrementing ID</strong> that the database generates upon <strong>INSERT</strong>. The server then responds with a 201 Created and the URL /employees/37. But remember, the network is unreliable. So what if the client never hears about this 201? The client has no choice but to try again. Now whether that\u2019s the user clicking submit twice or something within the application performing a retry, it doesn\u2019t matter. The application is going to end up sending another <strong>POST</strong> to /employees. On that <strong>second</strong> <strong>POST</strong>, the server is also going to do an <strong>INSERT</strong> into the Employee table, but this time it\u2019s going to come back with the ID of 38. So the second time we return a 201 CREATED /employees/38. This operation is not <strong>idempotent</strong> because upon the second receipt of the same message, the server duplicated the effect. It ends up inserted two rows.</p>\n<p>In order to behave in an idempotent manner, it needs to determine whether the client intended to create a second employee or if that was just a duplicate message. But in this particular API, every creation looks exactly the same. And so the server can\u2019t tell the difference between an intentional creation of a second object and a retry.</p>\n<p><strong>The solution</strong> is to introduce a <strong>client\u2011side ID</strong>. You see, if the client knows the ID of the object before it\u2019s created, then the server can tell the difference between the creation of a new object and a duplicate message. Duplicate messages will carry the same IDs as the original. And now if the client is supposed to know the ID before creation, we can\u2019t wait for the server to run an INSERT on the database in order to generate the ID. And so we have to use a different ID than the auto incrementing key in the database. In this case, we chooses to use a GUID as the ID of a employee. we\u2019ll represent this as an alternate key in the database. And then, we\u2019ll redesign the API to look like this. To create a new employee, the client will POST to /employees/abc\u2011123, the GUID of the employee that they intend to create. Upon first receipt of this message, the server will see that that alternate key does not exist within the Employee table. It will therefore insert the row and then return a 201 CREATED /employees/abc\u2011123. The table still has a primary key, which is an auto\u2011incrementing ID, but that ID is never returned through the API. But let\u2019s suppose that our unreliable network has dropped that 201 response message, and so the client retries. The client still has the ID that it intends to create, and so it sends a POST to /employees/abc\u2011123. This time when the server sees that message, it can tell that that alternate key already exists within the Employee table. It therefore does not insert an additional row, but it still returns 201 CREATED /employees/abc\u2011123. And so with these two changes to the API design and to the database design, we will be able to implement <strong>idempotence</strong> on the server side.</p>\n<h4>Immutability</h4>\n<blockquote><p>Immutability is good because that means that we keep a record of everything that happened within the system. And a beautiful application won\u2019t destroy data by overwriting it or deleting it.</p></blockquote>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F61c383bd-5067-4306-8a08-ee5dbb034b4f_800x395.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p><strong>Immutability</strong> as a default has several different advantages, some technical and some business advantages. One business advantage is that immutability gives you a reliable <strong>audit log</strong>. If you can\u2019t change or delete the information that\u2019s in the database, then every decision becomes an insert. Every row is an entry in your audit log, capturing the intent of the user. Another advantage on both the business and the technical side is that immutable systems do not destroy data. Immutable records cannot be deleted, and they cannot be updated where updates would replace or destroy the information that used to be in that record. But the most important technical advantage of immutability is that it preserves metadata. Preserving metadata is especially important in a distributed system. <strong>Metadata</strong> reveals which information a certain node has received in the past and therefore can control how it reacts to new information in the future. Metadata allows remote peers to converge and become eventually consistent.</p>\n<p><strong>Immutability</strong> is a great default for distributed systems. we will choose two very simple patterns to begin with. The first one is <strong>snapshots</strong>. Rather than keeping the mutable state of an employees within the Employee table, we are going to keep a separate snapshot table, and this will be called Employee Description table. Every time a user wants to change the description of a <strong>employee</strong>, they will end up inserting a row into the <strong>snapshot</strong> table. That will simulate <strong>updates</strong>, but what about <strong>deletes</strong>? Well for that, we will use the <strong>tombstone</strong> pattern. Instead of actually deleting the employee record, we\u2019ll insert a new record into the Employee Removed table. The presence of this employee removed child record indicates that the employee has been deleted. Both Employee Description and Employee Removed table have a employeeID foreign key, and they also contain a date. All tables in this system have an alternate key, and these two are no exception. The alternate keys of these two tables are the EmployeeID and either the date modified or the date removed.</p>\n<h4>Location Independence</h4>\n<blockquote><p>Distributed systems are made up of different applications that are deployed to different locations. If the behavior of an application is dependent upon where it\u2019s deployed, its location, then that causes problems while composing it into a distributed system.</p></blockquote>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4d07fd4e-d18e-4bbe-a943-bf0ea400c126_662x441.jpeg 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p>The <strong>third</strong> property that we want in a <strong>reliable application</strong> is <strong>location</strong> <strong>independence</strong>. <strong>Location independence</strong> implies that an application\u2019s behavior does not depend upon its location. In other words, if you were to deploy an application to multiple locations and then send the same message to each instance, they would all produce the same behavior. This might seem like a property that we get almost for free, but we\u2019ve already seen one example of an application design pattern that is not location independent, and that is the use of <strong>auto\u2011incrementing IDs</strong>. An <strong>auto\u2011incrementing ID</strong> generated on one database is only good at that one database. As an identifier for a row, it\u2019s dependent upon that location. If we were to insert the same object into databases at different locations, they would each come up with different identifiers. Where still, databases in different locations will come up with the same identifier for different objects.</p>\n<p>The solution to the above problem is to use <strong>hash</strong>, which is <strong>great location independent identifier</strong>. When hashes are used as identifiers, the pattern is known as <strong>content\u2011addressed storage</strong>. <strong>Content\u2011address storage</strong> means that you\u2019re using the content to identify itself. It works by computing the hash of the content that you want to store and then storing that in a location addressed by that hash. Now if somebody wants to refer to that object, they simply reference it by its hash. Unlike an auto\u2011incremented ID, content\u2011addressed storage is location independent. Every single instance of the application will compute the same hash for a given object. The hash depends only upon the content and not upon anything else that might happen to be stored at that location. Furthermore, different locations storing different objects are very unlikely to produce the same hash. Hash collisions are vanishingly rare.</p>\n<p>Now, if you\u2019re thinking, that\u2019s a really strange way to identify an object, well, you\u2019re probably already familiar with an existing implementation of content\u2011addressed storage. <strong>Docker</strong>, for example, uses content\u2011addressed storage in order to identify images. The identity of a Docker image is the hash of the steps that it took to produce it. You might also be familiar with <strong>Git</strong>. Git uses the SHA\u20111 hash of the commit as its identity.</p>\n<h4>Versioning</h4>\n<blockquote><p>Things change over time, and a well\u2011versioned application will tolerate those changes over time.</p></blockquote>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/f6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff6683dc0-d3a4-4827-83cc-128f0a35a243_700x394.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p>The final property that we wants to ensure that our reliable application has is proper <strong>versioning</strong>. we know that the <strong>network</strong> is not <strong>homogenous</strong>, and that means that different versions or applications are going to be deployed across different locations at different times. As this happens, we wants to make sure that we maintains the contract across those changes, and so we are going to want to make sure that we puts a good versioning strategy in place from the beginning.</p>\n<p>To consider how to version an application, we are going to break it down into <strong>three</strong> large components. <strong>An application consists of code, data, and an API</strong>. The <strong>code</strong> is by far the easiest of these three to version. We can use tools like source control and continuous integration and continuous delivery pipelines in order to make sure that we\u2019re delivering a consistent set of application code. And when the code is downloaded in pieces to the browser, we can use content\u2011addressed storage in order to make sure that all of the artifacts are consistent with one another. While code versioning is easy, data versioning is a little bit more tricky. <strong>Data</strong> will be stored on each of the different nodes, and we\u2019ll have to migrate that data to the next version in order to evolve the application. Since we are going to favor creating new tables, rather than adding columns to existing tables and finally, while data might be tricky, <strong>API versioning</strong> is downright difficult. Here, we consider the API of an application to be the endpoints that you can call, as well as the messages that you send and receive. API management is really application lifecycle management, because application interfaces evolve over time. There is no agreed\u2011upon best practice for evolving an API.</p>\n<p>We can use the <strong>URL strategy</strong> in order to indicate the version of the API. As the API evolves, the path changes to include a new version number. Another strategy would be to use <strong>content types</strong> in order to version APIs. A client would use an application\u2011defined Accept header, and the server supply an application\u2011defined Content\u2011Type. While this is more in keeping with the design philosophy of REST, it\u2019s a bit more difficult to implement. And <strong>the final versioning strategy is to simply avoid versioning</strong>, and while this might at first seem like an irresponsible strategy, it\u2019s precisely the strategy that <strong>GraphQL</strong> uses. <strong>GraphQL</strong> favors version-less APIs and allows the client to choose what the structure of their response.</p>\n<h4>Summary</h4>\n<p>These <strong>four properties</strong> are not the default. They don\u2019t come with any application template. It requires a bit more effort and buy\u2011in from application development teams, but the results are well worth it. By having these practices in place ahead of time, we know that each of the applications that our team builds are going to be <strong>good citizens of a distributed system</strong>. If you don\u2019t need to build distributed systems, then stop right here. Apply these principles, and your applications will be more reliable.</p>\n","enclosure":{"link":"https://substack-post-media.s3.amazonaws.com/public/images/dd86526a-b36a-46a2-a1b7-6b24bb04a642_800x618.jpeg","type":"image/jpeg"},"categories":[]},{"title":"Things to know about Java Collection","pubDate":"2021-12-11 16:03:30","link":"https://sanjayofficial.substack.com/p/things-to-know-about-java-collection-d5091a15aa07","guid":"https://sanjayofficial.substack.com/p/things-to-know-about-java-collection-d5091a15aa07","author":"Sanjay Mehta","thumbnail":"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg","description":"1. ArrayList subList() method","content":"\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/bd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbd22583e-b4f2-456a-b8f5-d5eb443e6b0c_800x600.jpeg 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></source></picture><div></div>\n</div></a></figure></div>\n<h3>1. ArrayList subList() method</h3>\n<p>As many of us know the <strong>subList()</strong> method of <strong>java.util.ArrayList</strong> class is used to return the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned list is empty.)</p>\n<p>But, it not only returns the portion of the list, but it also returns a view of the portion of the list. Let\u2019s understand better with the help of code!</p>\n<pre><code>List&lt;String&gt; namesList = new ArrayList&lt;&gt;();</code></pre>\n<pre><code>namesList.add(\"David\");\nnamesList.add(\"George\");\nnamesList.add(\"Anne\");\nnamesList.add(\"Bailey\");\nnamesList.add(\"Carol\");</code></pre>\n<pre><code>System.out.println(\"Original State of namesList : \"+namesList);</code></pre>\n<pre><code># Output of original List\nOriginal State of namesList : [David, George, Anne, Bailey, Carol]</code></pre>\n<pre><code># Get a view of list from index 1 to 3\nList&lt;String&gt; subList = namesList.subList(1, 4);</code></pre>\n<pre><code># Sort the elements in reverse order\nsubList.sort(Comparator.reverseOrder());</code></pre>\n<pre><code>System.out.println(\"Original State of namesList after sorting subList : \"+namesList);</code></pre>\n<pre><code># Output of original List\nOriginal State of namesList after sorting subList : [David, George, Bailey, Anne, Carol]</code></pre>\n<p>The returned list is backed by the original list, so non-structural changes in the returned list are reflected in the original list, and vice-versa. The returned list supports all of the optional list operations.</p>\n<p>So, if you try to make any structural changes in the returned list by using methods like add and clear. you will get <strong>UnsupportedOperationException</strong>.</p>\n<h3>2. Arrays asList()\u00a0method</h3>\n<p>The List returned using Arrays.asList() method is a <strong>fixed-size </strong><em><strong>List</strong></em>, we can\u2019t <strong>add/remove elements</strong>.</p>\n<pre><code>String[] flowers = { \"Ageratum\", \"Allium\", \"Poppy\", \"Catmint\" };  List&lt;String&gt; flowerList = Arrays.asList(flowers);  </code></pre>\n<pre><code>flowerList.add(\"Celosia\"); // throws UnsupportedOperationException</code></pre>\n<p>The root of this <em><strong>Exception</strong></em> is that the returned object doesn\u2019t implement the <em>add() </em>operation since it isn\u2019t the same as <em>java.util.ArrayList.</em></p>\n<p>There are ways by which we can get the mutable list from <strong>Arrays.asList</strong> method.</p>\n<p>For instance, we can pass the return object of <strong>Arrays.asList</strong> method in the constructor of <strong>ArrayList</strong>, which will support the add and remove operations.</p>\n<pre><code>String[] flowers = { \"Ageratum\", \"Allium\", \"Poppy\", \"Catmint\" };  List&lt;String&gt; flowerList = new ArrayList&lt;&gt;(Arrays.asList(flowers));</code></pre>\n<h3><strong>3. Double Brace Initialization</strong></h3>\n<p>Double braces can be used for <strong>creating and initializing objects in a single Java expression</strong>.</p>\n<h4>Standard Approach:</h4>\n<p>Normally we initialize and populate a set as follows:</p>\n<pre><code>Set&lt;String&gt; countries = new HashSet&lt;String&gt;();                     countries.add(\"India\");     \ncountries.add(\"USA\");\ncountries.add(\"USSR\");</code></pre>\n<p>As you can see in the above code</p>\n<ol>\n<li><p>Create an instance of <em>HashSet</em></p></li>\n<li><p>Add countries to the <em>HashSet</em></p></li>\n</ol>\n<h4><strong>Using Double\u00a0Brace:</strong></h4>\n<p>We can actually combine the creation and initialization in a single statement; this is where we make use of double braces:</p>\n<pre><code>Set&lt;String&gt; countries = new HashSet&lt;String&gt;() {{ \n           \nadd(\"India\");            \nadd(\"USSR\");            \nadd(\"USA\");        \n       \n}};</code></pre>\n<p>As you can see in the above code:</p>\n<ol>\n<li><p>Creating an anonymous inner class that extends <em>HashSet</em></p></li>\n<li><p>Providing an instance initialization block that invokes the add method and adds the country name to the <em>HashSet</em></p></li>\n</ol>\n<h4>Advantages of using Double\u00a0Brace:</h4>\n<ul>\n<li><p>Fewer lines of code compared to the native way of creation and initialization.</p></li>\n<li><p>The code is more readable.</p></li>\n<li><p>Creation initialization is done in the same expression.</p></li>\n</ul>\n<p>Thank you, for reading this post, hope you liked it please give applause.</p>\n","enclosure":{"link":"https://substack-post-media.s3.amazonaws.com/public/images/09956886-b52e-4826-80bd-31c9ec9f0c44_800x600.jpeg","type":"image/jpeg"},"categories":[]},{"title":"It\u2019s all about RxJS Subject","pubDate":"2021-09-18 09:45:26","link":"https://sanjayofficial.substack.com/p/its-all-about-rxjs-subject-f749e09b73ae","guid":"https://sanjayofficial.substack.com/p/its-all-about-rxjs-subject-f749e09b73ae","author":"Sanjay Mehta","thumbnail":"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg","description":"A Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many\u2026","content":"\n<blockquote><p>A Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.</p></blockquote>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/c3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc3a78a86-0651-4ffd-8d8b-3f3160706b5f_800x533.jpeg 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></source></picture><div></div>\n</div></a></figure></div>\n<p><strong>Every Subject is an Observable</strong>. You can subscribe to a Subject, providing an Observer, which will start receiving values normally. From the perspective of the Observer, it cannot tell whether the Observable execution is coming from a plain unicast Observable or a Subject.</p>\n<p><strong>Every Subject is an Observer</strong>. It is an object with the methods <strong>next(v)</strong>, <strong>error(e)</strong>, and <strong>complete()</strong>. To feed a new value to the Subject, just call <strong>next(value),</strong> and it will be multicasted to the Observers registered to listen to the Subject.</p>\n<p>Let\u2019s see the example below for a better understanding:</p>\n<pre><code>import { Subject } from 'rxjs';</code></pre>\n<pre><code>const subject = new Subject&lt;number&gt;();</code></pre>\n<pre><code>subject.subscribe({\n  next: (v) =&gt; console.log(`observerA: ${v}`)\n});\nsubject.subscribe({\n  next: (v) =&gt; console.log(`observerB: ${v}`)\n});</code></pre>\n<pre><code>subject.next(1);\nsubject.next(2);</code></pre>\n<pre><code>// Logs:\n// observerA: 1\n// observerB: 1\n// observerA: 2\n// observerB: 2</code></pre>\n<p>Since a Subject is an Observer, this also means you may provide a Subject as the argument to the <strong>subscribe</strong> of any Observable.</p>\n<pre><code>import { Subject, from } from 'rxjs';</code></pre>\n<pre><code>const subject = new Subject&lt;number&gt;();</code></pre>\n<pre><code>subject.subscribe({\n  next: (v) =&gt; console.log(`observerA: ${v}`)\n});\nsubject.subscribe({\n  next: (v) =&gt; console.log(`observerB: ${v}`)\n});</code></pre>\n<pre><code>const observable = from([1, 2, 3]);</code></pre>\n<pre><code>observable.subscribe(subject); // You can subscribe providing a Subject</code></pre>\n<pre><code>// Logs:\n// observerA: 1\n// observerB: 1\n// observerA: 2\n// observerB: 2\n// observerA: 3\n// observerB: 3</code></pre>\n<h3><strong>Few Specializations of the Subject\u00a0type</strong></h3>\n<ol>\n<li><p><strong>BehaviorSubject</strong></p></li>\n<li><p><strong>ReplaySubject</strong></p></li>\n<li><p><strong>AsyncSubject</strong></p></li>\n</ol>\n<h3><strong>BehaviorSubject</strong></h3>\n<p><em><strong>BehaviorSubject</strong>, which has a notion of \"<strong>the current value</strong>\". It stores the latest value emitted to its consumers, and whenever a new Observer subscribes, it will immediately receive the \"current value\" from the BehaviorSubject.</em></p>\n<p>In the below example, the <strong>BehaviorSubject</strong> is initialized with the value <code>0</code> which the first Observer receives when it subscribes. The second Observer receives the value <code>2</code> even though it subscribed after the value <code>2</code> was sent.</p>\n<pre><code>import { BehaviorSubject } from 'rxjs';\nconst subject = new BehaviorSubject(0); // 0 is the initial value</code></pre>\n<pre><code>subject.subscribe({\n  next: (v) =&gt; console.log(`observerA: ${v}`)\n});</code></pre>\n<pre><code>subject.next(1);\nsubject.next(2);</code></pre>\n<pre><code>subject.subscribe({\n  next: (v) =&gt; console.log(`observerB: ${v}`)\n});</code></pre>\n<pre><code>subject.next(3);</code></pre>\n<pre><code>// Logs\n// observerA: 0\n// observerA: 1\n// observerA: 2\n// observerB: 2\n// observerA: 3\n// observerB: 3</code></pre>\n<h3><strong>ReplaySubject</strong></h3>\n<p><em>A </em><strong>ReplaySubject</strong><em> records multiple values from the Observable execution and replays them to new subscribers.</em></p>\n<p>When creating a <strong>ReplaySubject</strong>, you can specify how many values to replay:</p>\n<pre><code>import { ReplaySubject } from 'rxjs';\nconst subject = new ReplaySubject(3); // buffer 3 values for new subscribers</code></pre>\n<pre><code>subject.subscribe({\n  next: (v) =&gt; console.log(`observerA: ${v}`)\n});</code></pre>\n<pre><code>subject.next(1);\nsubject.next(2);\nsubject.next(3);\nsubject.next(4);</code></pre>\n<pre><code>subject.subscribe({\n  next: (v) =&gt; console.log(`observerB: ${v}`)\n});</code></pre>\n<pre><code>subject.next(5);</code></pre>\n<pre><code>// Logs:\n// observerA: 1\n// observerA: 2\n// observerA: 3\n// observerA: 4\n// observerB: 2\n// observerB: 3\n// observerB: 4\n// observerA: 5\n// observerB: 5</code></pre>\n<p>As you can see last 3 values are stored for the new subscriber which is 2, 3, and 4.</p>\n<p><strong>Window time in ReplaySubject</strong></p>\n<p>ReplaySubject takes one more argument which specifies a <em>window time</em> in milliseconds.</p>\n<p>Besides the buffer size, to determine how old the recorded values can be we can specify <em>window time.</em></p>\n<p>Let\u2019s see the example below, we use a large buffer size of <strong>100</strong>, but a window time parameter of just <strong>500</strong> milliseconds.</p>\n<pre><code>import { ReplaySubject } from 'rxjs';\nconst subject = new ReplaySubject(100, 500 /* windowTime */);</code></pre>\n<pre><code>subject.subscribe({\n  next: (v) =&gt; console.log(`observerA: ${v}`)\n});</code></pre>\n<pre><code>let i = 1;\nsetInterval(() =&gt; subject.next(i++), 200);</code></pre>\n<pre><code>setTimeout(() =&gt; {\n  subject.subscribe({\n    next: (v) =&gt; console.log(`observerB: ${v}`)\n  });\n}, 1000);</code></pre>\n<pre><code>// Logs\n// observerA: 1\n// observerA: 2\n// observerA: 3\n// observerA: 4\n// observerA: 5\n// observerB: 3\n// observerB: 4\n// observerB: 5\n// observerA: 6\n// observerB: 6\n// ...</code></pre>\n<p>With the 500 milliseconds(0.5 second) windowTime the replay subject is only able to store the last 3 values under this time regardless of the buffer size.</p>\n<h3><strong>AsyncSubject</strong></h3>\n<p><em>The </em><strong>AsyncSubject</strong><em> is a variant where only the last value of the Observable execution is sent to its observers, and only when the execution completes.</em></p>\n<pre><code>import { AsyncSubject } from 'rxjs';\nconst subject = new AsyncSubject();</code></pre>\n<pre><code>subject.subscribe({\n  next: (v) =&gt; console.log(`observerA: ${v}`)\n});</code></pre>\n<pre><code>subject.next(1);\nsubject.next(2);\nsubject.next(3);\nsubject.next(4);</code></pre>\n<pre><code>subject.subscribe({\n  next: (v) =&gt; console.log(`observerB: ${v}`)\n});</code></pre>\n<pre><code>subject.next(5);\nsubject.complete();</code></pre>\n<pre><code>// Logs:\n// observerA: 5\n// observerB: 5</code></pre>\n<p>In the above example, the last value observers will get only after calling <strong>subject.complete()</strong> without calling <strong>complete()</strong> method no value will be sent to observers.</p>\n<p>Thank you, for reading this blog, hope you liked it please give applause and follow.</p>\n","enclosure":{"link":"https://substack-post-media.s3.amazonaws.com/public/images/c4b6a8fe-1fe2-49bd-a1c5-184c1a3ae65c_800x533.jpeg","type":"image/jpeg"},"categories":[]},{"title":"First Step towards Git and Github","pubDate":"2021-09-10 13:05:52","link":"https://sanjayofficial.substack.com/p/first-step-towards-git-and-github-bcb5107362e9","guid":"https://sanjayofficial.substack.com/p/first-step-towards-git-and-github-bcb5107362e9","author":"Sanjay Mehta","thumbnail":"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg","description":"Introduction","content":"\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3c0bb82b-8143-4d3e-a947-1e488e8c4fd1_600x381.jpeg 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></source></picture><div></div>\n</div></a></figure></div>\n<h3>Introduction</h3>\n<p>In the simple term\u00a0, <strong>Git</strong><em> is software you install on your computer to interact with Git repositories and </em><strong>GitHub</strong><em> is a very popular website (and free to use), which is used to host GitHub repositories.</em></p>\n<p><strong>Git</strong><em> </em>is a free and open-source <strong>distributed version control system</strong> designed to handle everything from small to very large projects with speed and efficiency.</p>\n<p>Let\u2019s understand what is <strong>Version Control System</strong>.</p>\n<p><strong>Version control</strong> <em>is a system that records changes to a file or set of files over time so that you can recall specific versions later</em>.</p>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8550bc89-f394-4744-ae0b-15f4db8b2e43_800x534.jpeg 1456w\" sizes=\"100vw\"></source></picture><div></div>\n</div></a></figure></div>\n<p><strong>Daily life example:</strong> <em>Imagine that your boss gave you a task to write an article on the paper in one hour. You are sure that you will finish perfectly but as we\u00a0,are human there are always possibilities, to make mistakes. After one hour, you just realized that made a mistake. Oh, no! Was there a way to fix it?</em></p>\n<p><em>In real life, you can take precautions on time to avoid unwanted situations or if something has really happened before prevention, simply means that it happened. So, we cannot change things occurred in past in actual life. Fortunately, version control systems help us to go back in time without a magic wand. Besides, it has more benefits than undo steps. Let\u2019s learn more.</em></p>\n<p>Before understanding <strong>distributed version control system\u00a0, </strong>let\u2019s take a look at types of Version Control System.</p>\n<p>There are many version control systems out there. Often they are divided into two groups: \u201c<strong>centralized</strong>\u201d and \u201c<strong>distributed</strong>\u201d.</p>\n<ul>\n<li><p>Centralized Version Control System</p></li>\n<li><p>Distributed Version Control System</p></li>\n</ul>\n<p><strong>Centralized Version Control System(CVCS)</strong></p>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F48b91d18-6eb3-40b4-9c4a-410bc230a0b3_800x353.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p>Centralized version control systems are based on the idea that there is a single \u201ccentral\u201d copy of your project somewhere (probably on a server), and programmers will \u201ccommit\u201d their changes to this central copy.</p>\n<p>\u201cCommitting\u201d a change simply means recording the change in the central system. Other programmers can then see this change. They can also pull down the change, and the version control tool will automatically update the contents of any files that were changed.</p>\n<p><strong>Drawbacks of CVCS</strong></p>\n<ul>\n<li><p>It is not locally available, which means we must connect to the network to perform operations.</p></li>\n<li><p>During the operations, if the central server gets crashed, there is a high chance of losing the data.</p></li>\n<li><p>For every command, CVCS connects the central server which impacts speed of operation</p></li>\n</ul>\n<p>\u200bThe <strong>Distributed Version Control System</strong> is developed to overcome all these issues.</p>\n<p><strong>Distributed Version Control System(DVCS)</strong></p>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fa4010e-afec-437f-9e1f-62ca46d711e9_800x529.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p>In distributed version control most of the mechanism or model applies the same as centralized. The only major difference you will find here is, instead of one single repository which is the server, here every single developer or client has their own server and they will have a copy of the entire history or version of the code and all of its branches in their local server or machine. Basically, every client or user can work locally and disconnected which is more convenient than centralized source control and that\u2019s why it is called distributed.</p>\n<p>It doesn\u2019t follow the way of communicating or merging the code straight forward to the master repository after making changes. Firstly you commit all the changes in your own server or repository and then the \u2018set of changes\u2019 will merge to the master repository.</p>\n<h3>Some Basic Commands to use\u00a0GIT</h3>\n<h4>Getting a Git Repository</h4>\n<p>There are two ways to obtain a Git repository\u00a0:</p>\n<ol>\n<li><p>You can take a local directory that is currently not under version control, and turn it into a Git repository, or</p></li>\n<li><p>You can <strong>clone</strong> an existing Git repository from elsewhere.</p></li>\n</ol>\n<p>In either case, you end up with a Git repository on your local machine, ready for work.</p>\n<h4><strong>Initializing a Repository in an Existing Directory</strong></h4>\n<p>To create a new repo, you\u2019ll use the <code>git init</code> command. <code>git init</code> is a one-time command you use during the initial setup of a new repo. Executing this command will create a new\u00a0<code>.git</code> subdirectory in your current working directory. This will also create a new main branch.</p>\n<pre><code>$ git init</code></pre>\n<h4>Cloning an Existing Repository</h4>\n<p>If a project has already been set up in a central repository, the clone command is the most common way for users to obtain a local development clone. Like <code>git init</code>, cloning is generally a one-time operation. Once a developer has obtained a working copy, all version control operations are managed through their local repository.</p>\n<pre><code>$ git clone &lt;repo url&gt;</code></pre>\n<h4>Recording Changes to the Repository</h4>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/f314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff314f2ae-b76e-45da-9997-ac5b1c0a17d5_800x330.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p>Remember that each file in your working directory can be in one of two states: <strong>tracked</strong> or <strong>untracked</strong>. Tracked files are files that were in the last snapshot, as well as any newly staged files; they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about.</p>\n<p>Untracked files are everything else\u200a\u2014\u200aany files in your working directory that were not in your last snapshot and are not in your staging area. When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven\u2019t edited anything.</p>\n<p>As you edit files, Git sees them as modified, because you\u2019ve changed them since your last commit. As you work, you selectively stage these modified files and then commit all those staged changes, and the cycle repeats.</p>\n<h4>Checking the Status of Your\u00a0Files</h4>\n<p>The <code>git status</code> command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven\u2019t, and which files aren\u2019t being tracked by Git.</p>\n<pre><code>$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working tree clean</code></pre>\n<p>This means you have a clean working directory; in other words, none of your tracked files are modified. Git also doesn\u2019t see any untracked files, or they would be listed here. Finally, the command tells you which branch you\u2019re on.</p>\n<h4>Saving changes</h4>\n<ul>\n<li><p>git add</p></li>\n<li><p>git commit</p></li>\n<li><p>git diff</p></li>\n<li><p>git stash</p></li>\n</ul>\n<h4>git add</h4>\n<p>The <code>git add</code> command adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit. However, <code>git add</code> doesn't really affect the repository in any significant way\u2014changes are not actually recorded until you run <code>git commit</code>.</p>\n<pre><code>$ git add &lt;file&gt; \n// Stage all changes in &lt;file&gt; for the next commit.</code></pre>\n<pre><code>$ git add &lt;directory&gt;\n// Stage all changes in &lt;directory&gt; for the next commit.</code></pre>\n<h4>git commit</h4>\n<p>The <code>git commit</code> command captures a snapshot of the project's currently staged changes. Committed snapshots can be thought of as \u201csafe\u201d versions of a project\u2014Git will never change them unless you explicitly ask it to. Prior to the execution of <code>git commit</code>, The <code>git add</code> command is used to promote or 'stage' changes to the project that will be stored in a commit.</p>\n<pre><code>$ git commit -m \"commit message\"</code></pre>\n<h4>git diff</h4>\n<p><code>git status</code> command is too vague for you\u200a\u2014\u200ayou want to know exactly what you changed, not just which files were changed\u200a\u2014\u200ayou can use the <code>git diff</code> command. You\u2019ll probably use it most often to answer these two questions: What have you changed but not yet staged? And what have you staged that you are about to commit? Although <code>git status</code> answers those questions very generally by listing the file names, <code>git diff</code> shows you the exact lines added and removed\u200a\u2014\u200athe patch, as it were.</p>\n<p>To see what you\u2019ve changed but not yet staged, type <code>git diff</code> with no other arguments:</p>\n<pre><code>$ git diff</code></pre>\n<p>That command compares what is in your working directory with what is in your staging area. The result tells you the changes you\u2019ve made that you haven\u2019t yet staged.</p>\n<p>You can use <code>git diff --staged</code>. This command compares your staged changes to your last commit:</p>\n<pre><code>$ git diff --staged</code></pre>\n<h4>git stash</h4>\n<p>Often, when you\u2019ve been working on part of your project, things are in a messy state and you want to switch branches for a bit to work on something else. The problem is, you don\u2019t want to do a commit of half-done work just so you can get back to this point later. The answer to this issue is the <code>git stash</code> command.</p>\n<p>Stashing takes the dirty state of your working directory\u200a\u2014\u200athat is, your modified tracked files and staged changes\u200a\u2014\u200aand saves it on a stack of unfinished changes that you can reapply at any time (even on a different branch).</p>\n<pre><code>$ git stash\nSaved working directory and index state \\\n  \"WIP on master: 049d078 Create index file\"\nHEAD is now at 049d078 Create index file\n(To restore them type \"git stash apply\")</code></pre>\n<p>You can reapply the one you just stashed by using the command\u00a0: git stash apply</p>\n<pre><code>$ git stash apply\nOn branch master\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n\tmodified:   index.html\n\tmodified:   lib/simplegit.rb\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")</code></pre>\n<p>Thank you, for reading this post\u00a0, hope you liked it please give an applause.</p>\n","enclosure":{"link":"https://substack-post-media.s3.amazonaws.com/public/images/a1c65b4b-a5c9-4907-b240-060285cea4e9_600x381.jpeg","type":"image/jpeg"},"categories":[]},{"title":"S.O.L.I.D. Principals","pubDate":"2021-09-02 15:24:47","link":"https://sanjayofficial.substack.com/p/s-o-l-i-d-principals-41a5b3b604eb","guid":"https://sanjayofficial.substack.com/p/s-o-l-i-d-principals-41a5b3b604eb","author":"Sanjay Mehta","thumbnail":"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png","description":"Introduction","content":"\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F91fbb9e7-efd6-4f66-8883-73cae7517d9a_800x368.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></source></picture><div></div>\n</div></a></figure></div>\n<h3><strong>Introduction</strong></h3>\n<p><em><strong>SOLID</strong></em> is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin (also known as <a href=\"http://en.wikipedia.org/wiki/Robert_Cecil_Martin\">Uncle Bob</a>).</p>\n<p><strong>SOLID</strong> stands for:</p>\n<ul>\n<li><p><strong>S</strong>\u200a\u2014\u200aSingle Responsibility Principle</p></li>\n<li><p><strong>O</strong>\u200a\u2014\u200aOpen-closed Principle</p></li>\n<li><p><strong>L</strong>\u200a\u2014\u200aLiskov Substitution Principle</p></li>\n<li><p><strong>I</strong>\u200a\u2014\u200aInterface Segregation Principle</p></li>\n<li><p><strong>D</strong>\u200a\u2014\u200aDependency Inversion Principle</p></li>\n</ul>\n<h3>Why use the Solid Principles of\u00a0OOP?</h3>\n<ul>\n<li><p>Object Oriented Programming is a powerful concept.</p></li>\n<li><p>But, OOP doesn\u2019t always lead to quality software.</p></li>\n<li><p>The five principles focus on dependency management.</p></li>\n<li><p>Poor Dependency Management leads to code that is brittle, fragile, and hard to change.</p></li>\n<li><p>Proper dependency management leads to quality code that is easy to maintain.</p></li>\n</ul>\n<h3>Single Responsibility Principle</h3>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F60448467-454d-427d-acfa-b4115a59913a_639x463.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F60448467-454d-427d-acfa-b4115a59913a_639x463.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F60448467-454d-427d-acfa-b4115a59913a_639x463.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F60448467-454d-427d-acfa-b4115a59913a_639x463.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F60448467-454d-427d-acfa-b4115a59913a_639x463.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F60448467-454d-427d-acfa-b4115a59913a_639x463.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/60448467-454d-427d-acfa-b4115a59913a_639x463.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F60448467-454d-427d-acfa-b4115a59913a_639x463.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F60448467-454d-427d-acfa-b4115a59913a_639x463.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F60448467-454d-427d-acfa-b4115a59913a_639x463.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F60448467-454d-427d-acfa-b4115a59913a_639x463.png 1456w\" sizes=\"100vw\"></source></picture><div></div>\n</div></a></figure></div>\n<p><strong>Single Responsibility Principle states that</strong></p>\n<p><em>A class should have one and only one reason to change, meaning that a class should have only one job.</em></p>\n<ul>\n<li><p>Every class should have a single responsibility.</p></li>\n<li><p>Classes should be small. No more than a screen full of code.</p></li>\n<li><p>Avoid <strong>GOD</strong> classes</p></li>\n<li><p>Split big classes into smaller classes.</p></li>\n</ul>\n<p>Let\u2019s understand with the help of code.</p>\n<pre><code>public class SimpleCalculator{</code></pre>\n<pre><code>  public int add(int a , int b){\n      return a + b;\n  }</code></pre>\n<pre><code>  public int subtract(int a , int b){\n      return a - b;\n  }</code></pre>\n<pre><code>  public int multiply(int a , int b){\n      return a * b;\n  }</code></pre>\n<pre><code>  public int divide(int a , int b){\n      return a/b;\n  }\n  \n  public void printSum(int sum){\n      System.out.println(s);\n  }</code></pre>\n<pre><code>}</code></pre>\n<p>The Simple calculator class violates the rule of SRP. As per the rule a class should have one job to do but the Simple calculator class have two responsibilities <strong>calculating</strong> and <strong>printing</strong> the value.</p>\n<p>We should create another class ValuePrinter that handles only printing the value.</p>\n<pre><code>public class ValuePrinter{</code></pre>\n<pre><code>public void printSum(int value){\n      System.out.println(value);\n  }</code></pre>\n<pre><code>}</code></pre>\n<pre><code>public class SimpleCalculator{</code></pre>\n<pre><code>public int add(int a , int b){\n      return a + b;\n  }</code></pre>\n<pre><code>public int subtract(int a , int b){\n      return a - b;\n  }</code></pre>\n<pre><code>public int multiply(int a , int b){\n      return a * b;\n  }</code></pre>\n<pre><code>public int divide(int a , int b){\n      return a/b;\n  }\n}</code></pre>\n<p>That satisfies the single-responsibility principle.</p>\n<h3>Open-Closed Principal</h3>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Facc56416-17d4-4f38-8c76-024cefac6212_800x229.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Facc56416-17d4-4f38-8c76-024cefac6212_800x229.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Facc56416-17d4-4f38-8c76-024cefac6212_800x229.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Facc56416-17d4-4f38-8c76-024cefac6212_800x229.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Facc56416-17d4-4f38-8c76-024cefac6212_800x229.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Facc56416-17d4-4f38-8c76-024cefac6212_800x229.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/acc56416-17d4-4f38-8c76-024cefac6212_800x229.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Facc56416-17d4-4f38-8c76-024cefac6212_800x229.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Facc56416-17d4-4f38-8c76-024cefac6212_800x229.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Facc56416-17d4-4f38-8c76-024cefac6212_800x229.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Facc56416-17d4-4f38-8c76-024cefac6212_800x229.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p><strong>Open-Closed principle states that</strong></p>\n<p><em>Objects or entities should be open for extension but closed for modification.</em></p>\n<ul>\n<li><p>Classes should be open for extension.</p></li>\n<li><p>But close for modification.</p></li>\n<li><p>You should be able to extend a classes behavior, without modifying it.</p></li>\n<li><p>Use private variables with getters and setters -ONLY when you need them.</p></li>\n<li><p>Use abstract base classes.</p></li>\n</ul>\n<p>Consider an insurance system that validates health insurance claims before approving one. A <strong>HealthInsuranceSurveyor</strong> class responsible to validate claims and a <strong>ClaimApprovalManager</strong> class responsible to approve claims.</p>\n<pre><code>public class HealthInsuranceSurveyor{</code></pre>\n<pre><code>public boolean isValidClaim(){\n    System.out.println(\"HealthInsuranceSurveyor: Validating health insurance claim...\");\n  \n   return true;</code></pre>\n<pre><code> }</code></pre>\n<pre><code>public class ClaimApprovalManager{</code></pre>\n<pre><code>public void processHeathClaim(HealthInsuranceSurveyor surveyor){\n       if(surveyor.isValidClaim()){\n           System.out.println(\"ClaimApprovalManager : Valid claim. \nCurrently processing claim for approval....\");</code></pre>\n<pre><code>      }</code></pre>\n<pre><code>  }</code></pre>\n<pre><code>}</code></pre>\n<p>Both the <strong>HealthInsuranceSurveyor</strong> and <strong>ClaimApprovalManager</strong> classes work fine and the design for the insurance system appears perfect until a new requirement to process vehicle insurance claims arises.We now need to include a new <strong>VehicleInsuranceSurveyor</strong> class, and this should not create any problems. But, what we also need is to modify the <strong>ClaimApprovalManager</strong> class to process vehicle insurance claims. This is how the modified <strong>ClaimApprovalManager</strong> will be:</p>\n<h4>Modified ClaimApprovalManager.java</h4>\n<pre><code>public class ClaimApprovalManager{</code></pre>\n<pre><code>public void processHeathClaim(HealthInsuranceSurveyor surveyor){\n       if(surveyor.isValidClaim()){\n           System.out.println(\"ClaimApprovalManager : Valid claim. \nCurrently processing claim for approval....\");</code></pre>\n<pre><code>}\n}\npublic void processVehicleClaim(VehicleInsuranceSurveyor surveyor){\n     if(surveyor.isValidClaim()){\n           System.out.println(\"ClaimApprovalManager : Valid claim. \nCurrently processing claim for approval....\");\n}\n}\n}</code></pre>\n<p>In the example above, we modified the <strong>ClaimApprovalManager</strong> class by adding a new <strong>processVehicleClaim</strong>( ) method to incorporate a new functionality (claim approval of vehicle insurance).This is a clear violation of the Open Closed Principle.</p>\n<p>The ideal approach for the insurance claim example would have been to design the ClaimApprovalManager class in a way that it remains:</p>\n<ul>\n<li><p><strong>Open</strong> to support more types of insurance claims.</p></li>\n<li><p><strong>Closed</strong> for any modifications whenever support for a new type of claim is added.</p></li>\n</ul>\n<p>To achieve this, let\u2019s introduce a layer of abstraction by creating an abstract class to represent different claim validation behaviors. We will name the class InsuranceSurveyor.</p>\n<h4>InsuranceSurveyor.java</h4>\n<pre><code>public abstract class InsuranceSurveyor{\n  public abstract boolean isValidClaim();\n}</code></pre>\n<h4>HealthInsuranceSurveyor.java</h4>\n<pre><code>public class HealthInsuranceSurveyor extends InsuranceSurveyor{</code></pre>\n<pre><code>public boolean isValidClaim(){\n    System.out.println(\"HealthInsuranceSurveyor: Validating health insurance claim...\");\n  \n   return true;</code></pre>\n<pre><code>}</code></pre>\n<h4>VehicleInsuranceSurveyor.java</h4>\n<pre><code>public class VehicleInsuranceSurveyor extends InsuranceSurveyor{</code></pre>\n<pre><code>public boolean isValidClaim(){\n    System.out.println(\"VehicleInsuranceSurveyor: Validating vehicle insurance claim...\");\n  \n   return true;</code></pre>\n<pre><code>}</code></pre>\n<h4>ClaimApprovalManager.java</h4>\n<pre><code>public class ClaimApprovalManager{</code></pre>\n<pre><code>public void processHeathClaim(InsuranceSurveyor surveyor){\n       if(surveyor.isValidClaim()){\n           System.out.println(\"ClaimApprovalManager : Valid claim. \nCurrently processing claim for approval....\");\n}\n}\n}</code></pre>\n<p>In the example above, we wrote a processClaim( ) method to accept a InsuranceSurveyor type instead of specifying a concrete type. In this way, any further addition of InsuranceSurveyor implementations will not affect the ClaimApprovalManager class. Our insurance system is now <strong>open</strong> to support more types of insurance claims, and <strong>closed</strong> for any modifications whenever a new claim type is added.</p>\n<h3>Liskov Substitution Principle</h3>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4ba3b1b2-94dc-4150-9bd3-9ed182136ce3_656x507.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p><em>The principal defines that objects of a superclass shall be replaceable with object of its subclasses without breaking the application.</em></p>\n<ul>\n<li><p>That requires the objects of your subclasses to behave in the same way as the objects of your superclass.</p></li>\n<li><p>It means that we must make sure that new derived classes are extending the base classes without changing their behavior.</p></li>\n<li><p>It is an extension of Open Closed Principal.</p></li>\n<li><p>This principal helps you to implement OCP correctly.</p></li>\n</ul>\n<p>Let\u2019s take an example to understand it better</p>\n<ol>\n<li><p>Calculate Area of Rectangle.</p></li>\n<li><p>Calculate Area of Square as well</p></li>\n</ol>\n<p>As we know, <strong>Square is a Rectangle</strong> and if we talk about inheritance it is also be read as \u201c<strong>IS A</strong>\u201d relationship.</p>\n<p>So, we can create Rectangle as a base or super class and Square as sub class.</p>\n<p><strong>Rectangle.java</strong></p>\n<pre><code>public class Rectangle {</code></pre>\n<pre><code> protected int width;\n protected int height;</code></pre>\n<pre><code>public int getWidth(){\n   return this.width;\n }</code></pre>\n<pre><code>public int getHeight(){\n   return this.height;\n }\n \npublic void setHeight(int height){\n  this.height = height;\n}</code></pre>\n<pre><code>public void setWidth(int width){\n  this.width = width;\n}</code></pre>\n<pre><code>public int getArea(){\n return this.height * this.width;\n}\n}</code></pre>\n<p><strong>Square.java</strong></p>\n<pre><code>public class Square extends Rectangle{ \n \npublic void setHeight(int height){\n  this.height = height;\n  this.width = height;</code></pre>\n<pre><code>}</code></pre>\n<pre><code>public void setWidth(int width){\n  this.width = width;\n  this.height = width;\n}\n}</code></pre>\n<p><strong>CalculateRectangleArea.java</strong></p>\n<pre><code>public class CalculateRectangleArea{</code></pre>\n<pre><code>public static void main(String[] args){\n   \n  Rectangle rect = new Rectangle();\n  rect.setWidth(2);\n  rect.setHeight(3);</code></pre>\n<pre><code>  System.out.println(\"Area of rectangle : \" + rect.getArea());</code></pre>\n<pre><code>}\n}</code></pre>\n<pre><code>Output : \nArea of rectangle : 6</code></pre>\n<p><strong>CalculateSquareArea.java</strong></p>\n<pre><code>public class CalculateSquareArea{</code></pre>\n<pre><code>public static void main(String[] args){\n   \n  Rectangle square = new Square();\n  square.setWidth(2);\n  square.setHeight(3);</code></pre>\n<pre><code>System.out.println(\"Area of square: \" + square.getArea());</code></pre>\n<pre><code>}\n}</code></pre>\n<pre><code>Output : \nArea of square : 9</code></pre>\n<p>Now, if we change the order of setWidth and setHeight method</p>\n<pre><code>public class CalculateSquareArea{</code></pre>\n<pre><code>public static void main(String[] args){\n   \n  Rectangle square = new Square();\n  square.setHeight(3);\n  square.setWidth(2);</code></pre>\n<pre><code>System.out.println(\"Area of square is : \" + square.getArea());</code></pre>\n<pre><code>}\n}</code></pre>\n<pre><code>Output : \nArea of square is : 4</code></pre>\n<p>The output after changing the order of method is not same\u00a0, so the above code violates the LSP principle i.e \u201c <em>The objects of your subclasses to behave in the same way as the objects of your superclass</em>\u201d.</p>\n<p><strong>How to identify violation of LSP.</strong></p>\n<ul>\n<li><p>A not implemented method in the subclass.</p></li>\n<li><p>Subclass function overrides the base class method to give it new meaning.</p></li>\n</ul>\n<p>Let\u2019s implement the LSP in the correct manner.</p>\n<p><strong>Shape.java</strong></p>\n<pre><code>public abstract class Shape {\n abstract public int getArea();\n}</code></pre>\n<p><strong>Rectangle.java</strong></p>\n<pre><code>public class Rectangle extends Shape{</code></pre>\n<pre><code>protected int width;\n protected int height;</code></pre>\n<pre><code>public int getWidth(){\n   return this.width;\n }</code></pre>\n<pre><code>public int getHeight(){\n   return this.height;\n }\n \npublic void setHeight(int height){\n  this.height = height;\n}</code></pre>\n<pre><code>public void setWidth(int width){\n  this.width = width;\n}</code></pre>\n<pre><code>@Override\npublic int getArea(){\n return this.height * this.width;\n}\n}</code></pre>\n<p><strong>Square.java</strong></p>\n<pre><code>public class Square extends Shape{</code></pre>\n<pre><code>int length;</code></pre>\n<pre><code>public int getLength(){\n   return this.length;\n }\n \npublic void setLength(int length){\n  this.length = length;\n}</code></pre>\n<pre><code>@Override\npublic int getArea(){\n return this.length * this.length;\n}\n}</code></pre>\n<p><strong>CalculateRectangleArea.java</strong></p>\n<pre><code>public class CalculateRectangleArea{</code></pre>\n<pre><code>public static void main(String[] args){\n   \n  Shape rect = new Rectangle();\n  rect.setWidth(2);\n  rect.setHeight(3);</code></pre>\n<pre><code>System.out.println(\"Area of rectangle : \" + rect.getArea());</code></pre>\n<pre><code>}\n}</code></pre>\n<pre><code>Output : \nArea of rectangle : 6</code></pre>\n<p><strong>CalculateSquareArea.java</strong></p>\n<pre><code>public class CalculateSquareArea{</code></pre>\n<pre><code>public static void main(String[] args){\n   \n  Shape square = new Square();\n  square.setLength(2);</code></pre>\n<pre><code>System.out.println(\"Area of square : \" + square.getArea());</code></pre>\n<pre><code>}\n}</code></pre>\n<pre><code>Output : \nArea of square : 4</code></pre>\n<p><strong>Why we shouldn\u2019t violate LSP.</strong></p>\n<ul>\n<li><p>The use of using abstract base class is that, in future, you can write a new subclass and insert it into existing, working, tested code.</p></li>\n<li><p>The essence of the Open Closed Principal.</p></li>\n<li><p>However, when the subclasses don\u2019t adhere properly to the behavior of the base class, you have to go through the existing code and modify the subclasses accordingly.</p></li>\n<li><p>This is a blatant violation of the Open Closed Principal.</p></li>\n</ul>\n<h3>Interface Segregation Principle</h3>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F76343499-9f01-4037-bd4d-5df9fad14c22_640x481.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p><em>This principle states that \u201cClients should not be forced to depend on methods that they do not use\u201d. Here, the term \u201cClients\u201d refers to the implementing classes of an interface.</em></p>\n<p>The <strong>Interface Segregation Principle</strong> advocates segregating a \u201cfat interface\u201d into smaller and <a href=\"https://en.wikipedia.org/wiki/Cohesion_%28computer_science%29\" title=\"Cohesion\">highly cohesive</a> interfaces, known as \u201crole interfaces\u201d. Each \u201crole interface\u201d declares one or more methods for a specific behavior. Thus clients, instead of implementing a \u201cfat interface\u201d, can implement only those \u201crole interfaces\u201d whose methods are relevant to them.</p>\n<h4>Interface Segregation Principle Violation (Bad Example):</h4>\n<p>Let\u2019s consider an example, the Athlete interface is an interface with some actions of an athlete:</p>\n<pre><code>public interface Athlete {</code></pre>\n<pre><code>void compete();</code></pre>\n<pre><code>void swim();</code></pre>\n<pre><code>void highJump();</code></pre>\n<pre><code>void longJump();</code></pre>\n<pre><code>}</code></pre>\n<p>We have added the method compete, but also there some extra methods like <code>swim,</code> <code>highJump</code>\u00a0, and <code>longJump</code>.</p>\n<p>Suppose that John Doe is a swimming athlete. By implementing the Athlete interface, we have to implement methods like <code>highJump</code> and <code>longJump</code>, which JohnDoe will never use.</p>\n<pre><code>public class JohnDoe implements Athlete {</code></pre>\n<pre><code>@Override\n    public void compete() {\n        System.out.println(\"John Doe started competing\");\n    }</code></pre>\n<pre><code>@Override\n    public void swim() {\n        System.out.println(\"John Doe started swimming\");\n    }</code></pre>\n<pre><code>@Override\n    public void highJump() {\n    }</code></pre>\n<pre><code>@Override\n    public void longJump() {\n    }\n}</code></pre>\n<p>The same problem will occur for another athlete who might be a field Athlete competing in the high jump and long jump.</p>\n<p>We will follow the interface segregation principle and refactor the original interface:</p>\n<pre><code>public interface Athlete {</code></pre>\n<pre><code>void compete();\n}</code></pre>\n<p>Then we will create two other interfaces\u200a\u2014\u200aone for Jumping athletes and one for Swimming athletes.</p>\n<pre><code>public interface SwimmingAthlete extends Athlete {</code></pre>\n<pre><code>void swim();</code></pre>\n<pre><code>}</code></pre>\n<pre><code>public interface JumpingAthlete extends Athlete {</code></pre>\n<pre><code>void highJump();</code></pre>\n<pre><code>void longJump();</code></pre>\n<pre><code>}</code></pre>\n<p>And therefore John Doe will not have to implement actions that he is not capable of performing:</p>\n<pre><code>public class JohnDoe implements SwimmingAthlete {</code></pre>\n<pre><code>@Override\n    public void compete() {\n        System.out.println(\"John Doe started competing\");\n    }</code></pre>\n<pre><code>@Override\n    public void swim() {\n        System.out.println(\"John Doe started swimming\");\n    }</code></pre>\n<pre><code>}</code></pre>\n<h4>Summary of Interface Segregation Principle</h4>\n<h3>Dependency Inversion Principle</h3>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F143b02b7-eb9a-4004-8512-522ab6455f77_640x482.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p><em>High-level modules should not depend on low-level modules. Both should depend on abstractions.</em></p>\n<p><em>High-level modules should not depend on low-level modules. Both should depend on abstractions.</em></p>\n<ul>\n<li><p>Entities must depend on abstractions, not on concretions.</p></li>\n<li><p>This principle allows for decoupling.</p></li>\n</ul>\n<p>Here is an example of a <code>PasswordReminder</code> that connects to a MySQL database:</p>\n<pre><code>class MySQLConnection\n{\n    public Connection connect()\n    {\n        // handle the database connection\n        return 'Database connection';\n    }\n}</code></pre>\n<pre><code>class PasswordReminder\n{\n    private MySQLConnection dbConnection;</code></pre>\n<pre><code>public void construct(MySQLConnection dbConnection)\n    {\n        this.dbConnection = dbConnection;\n    }\n}</code></pre>\n<p>First, the <code>MySQLConnection</code> is the low-level module while the <code>PasswordReminder</code> is high level, but according to the definition of <strong>D</strong> in SOLID, which states to <em>Depend on abstraction, not on concretions</em>. This snippet above violates this principle as the <code>PasswordReminder</code> class is being forced to depend on the <code>MySQLConnection</code> class.</p>\n<p>Later, if you were to change the database engine, you would also have to edit the <code>PasswordReminder</code> class, and this would violate the <em>open-close principle</em>.</p>\n<p>The <code>PasswordReminder</code> class should not care what database your application uses. To address these issues, you can code to an interface since high-level and low-level modules should depend on abstraction:</p>\n<pre><code>interface DBConnectionInterface\n{\n    public Connection connect();\n}</code></pre>\n<p>The interface has a connect method and the <code>MySQLConnection</code> class implements this interface. Also, instead of directly type-hinting <code>MySQLConnection</code> class in the constructor of the <code>PasswordReminder</code>, you instead type-hint the <code>DBConnectionInterface</code> and no matter the type of database your application uses, the <code>PasswordReminder</code> class can connect to the database without any problems and open-close principle is not violated.</p>\n<pre><code>class MySQLConnection implements DBConnectionInterface\n{\n    public Connection connect()\n    {\n        // handle the database connection\n        return 'Database connection';\n    }\n}</code></pre>\n<pre><code>class PasswordReminder\n{\n    private DBConnectionInterface dbConnection;</code></pre>\n<pre><code>public void construct(DBConnectionInterface dbConnection)\n    {\n        this.dbConnection = dbConnection;\n    }\n}</code></pre>\n<p>This code establishes that both the high-level and low-level modules depend on abstraction.</p>\n<h3><strong>Conclusion</strong></h3>\n<ul>\n<li><p>The <strong>SOLID</strong> principals of OOP will lead you to better quality code which is more testable and easier to maintain.</p></li>\n<li><p>A key theme is avoiding tight coupling in your code.</p></li>\n</ul>\n<p>Thanks for reading this blog. Happy Learning!!!</p>\n","enclosure":{"link":"https://substack-post-media.s3.amazonaws.com/public/images/db6bffa1-195d-4405-bc9d-b82a07dc7305_800x368.png","type":"image/jpeg"},"categories":[]},{"title":"Java Modularity","pubDate":"2021-08-21 17:10:33","link":"https://sanjayofficial.substack.com/p/java-modularity-a848942d0820","guid":"https://sanjayofficial.substack.com/p/java-modularity-a848942d0820","author":"Sanjay Mehta","thumbnail":"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png","description":"Modularity is a general concept which applies to the development of software in a fashion which allows individual modules to be developed\u2026","content":"\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/bfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":false,\"topImage\":true,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fbfa9033b-34bb-4b0a-9573-8252e611ce61_518x180.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"></source></picture><div></div>\n</div></a></figure></div>\n<blockquote><p><strong>Modularity</strong> is a general concept which applies to the development of software in a fashion which allows individual <em>modules</em> to be developed, often with a standardized interface to allow modules to communicate. In fact, the kind of separation of concerns between objects in an OO language is much the same concept as for modules, except on a larger scale. Typically, partitioning a system into modules helps minimize <a href=\"http://en.wikipedia.org/wiki/Coupling_%28computer_science%29\">coupling</a>, which should lead to easier to maintain code.</p></blockquote>\n<h3>Why do we need Java modularity?</h3>\n<p><strong>The JDK before Java SE 9</strong></p>\n<p>1\u00a0. The JDK was huge and monolithic.</p>\n<p>2. This resulted in increased\u2026<br>\u200a\u2014\u200aDownload Time<br>\u200a\u2014\u200aStartup Time<br>\u200a\u2014\u200aMemory Footprint</p>\n<p><strong>The Modular JDK</strong></p>\n<ol><li><p>With <strong>Java</strong> SE 9\u00a0, the monolithic <strong>JDK</strong> was broken into 90 modules.</p></li></ol>\n<p>2. Every module is a well defined piece of functionality.<br>\u200a\u2014\u200aSimilar packages and frameworks are grouped into their own modules.<br>\u00a0For example: Logging\u00a0, Swing and Instrumentation.<br>\u200a\u2014\u200aBe aware of modules for significant API\u00a0, not trivial ones.</p>\n<p>3. Benefits Include:<br>\u200a\u2014\u200aApplications which are more scalable to small devices.<br>\u200a\u2014\u200aImproved application perfomance<br>\u200a\u2014\u200aImproved security and maintainability(for Java and your apps)</p>\n<p><strong>Listing the modules in Java 9</strong></p>\n<pre><code>$java --list-modules</code></pre>\n<h3><strong>Java SE\u00a0Modules</strong></h3>\n<p>These Modules are classified into two categories:</p>\n<ol>\n<li><p>Standard modules( java.* prefix for module names):<br>\u200a\u2014\u200aPart of the Java SE specification<br>\u200a\u2014\u200aFor example: java.sql for database connectivity, java.xml for XML processing\u00a0, and java.logging for logging</p></li>\n<li><p>Modules not defined in the Java SE platform(jdk.* prefix for module names):<br>\u200a\u2014\u200aAre specific to the JDK<br>\u200a\u2014\u200aFor example: jdk.jshell\u00a0, jdk.policytool, jdk.httpserver</p></li>\n</ol>\n<h3>What\u2019s Inside a\u00a0Module?</h3>\n<ul>\n<li><p>A module is a set of exported packages and concealed packages.</p></li>\n<li><p><strong>public</strong> no longer means \u201caccessible to everyone\u201d.</p></li>\n<li><p>You may set up modules to encapsulate your own code.</p></li>\n</ul>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F712f8d26-6886-4829-a25f-5495c966f1a5_800x450.jpeg 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a></figure></div>\n<p><strong>Accessibility( JDK 9 and later)</strong></p>\n<ul>\n<li><p>public <strong>to everyone</strong></p></li>\n<li><p>public, <strong>but only to specific modules</strong></p></li>\n<li><p>public <strong>only within a module</strong></p></li>\n<li><p>protected</p></li>\n<li><p><strong>&lt;package&gt;</strong></p></li>\n<li><p>private</p></li>\n</ul>\n<h3><strong>module-info.java</strong></h3>\n<ul>\n<li><p>A module is declared with a <strong>module-info.java</strong> file.</p></li>\n<li><p>Declarations begin with the keyword <strong>module</strong>, followed by a unique module name and a module body enclosed in braces.</p></li>\n<li><p>Add directives such as <strong>requires</strong>\u00a0, <strong>exports</strong> to specify accessibility between modules.<br>\u200a\u2014\u200aWhat packages the module makes available to other modules?<br>\u200a\u2014\u200aWhere a package is exported to?<br>\u200a\u2014\u200aWhat outside modules it\u2019s dependent on?</p></li>\n</ul>\n<pre><code>module modulename {</code></pre>\n<pre><code>}</code></pre>\n<h3>Creating a Modular\u00a0Project</h3>\n<ul>\n<li><p>Name of the project</p></li>\n<li><p>Place module-info.java in the root directory of the packages that you want to group as a module.</p></li>\n<li><p>NetBeans marks this as the default package.</p></li>\n<li><p>One modular JAR is produced for every module.</p></li>\n</ul>\n<p>\u2014 <strong>Modular</strong> JARs become the unit of release and reuse.</p>\n<p>\u2014 They\u2019re intended to contain a very specific set of functionality.</p>\n<div class=\"captioned-image-container\"><figure><a class=\"image-link image2\" target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png\" data-component-name=\"Image2ToDOM\"><div class=\"image2-inset\">\n<picture><source type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png 1456w\" sizes=\"100vw\"><img src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png\" data-attrs='{\"src\":\"https://substack-post-media.s3.amazonaws.com/public/images/0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png\",\"srcNoWatermark\":null,\"fullscreen\":null,\"imageSize\":null,\"height\":null,\"width\":null,\"resizeWidth\":null,\"bytes\":null,\"alt\":null,\"title\":null,\"type\":null,\"href\":null,\"belowTheFold\":true,\"topImage\":false,\"internalRedirect\":null,\"isProcessing\":false}' class=\"sizing-normal\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F0cf52f6f-987c-43de-a6aa-f138e77a4bc2_304x289.png 1456w\" sizes=\"100vw\" loading=\"lazy\"></source></picture><div></div>\n</div></a><figcaption class=\"image-caption\">Modules-Project</figcaption></figure></div>\n<h3>\n<strong>exports </strong>Module Directive</h3>\n<ul>\n<li><p>Declares a package is accessible to code in all other modules.<br>\u200a\u2014\u200aIncludes access to the package\u2019s public classes\u00a0, fields\u00a0, and methods.<br>\u200a\u2014\u200aExcludes access to anything with private\u00a0, protected, or package access.</p></li>\n<li><p>Use the exports statement judiciously.<br>\u200a\u2014\u200aYou\u2019ll never be certain how someone else wants to use your module.<br>\u200a\u2014\u200aExport only those packages that you feel are safe.<br>\u200a\u2014\u200aModularity is about future-proofing</p></li>\n</ul>\n<pre><code>module A {\n  exports pkgA;</code></pre>\n<pre><code>}</code></pre>\n<h3>exports\u2026to Module Directive</h3>\n<ul>\n<li><p>Declare a package is accessible to code in specific modules<br>\u200a\u2014\u200aIncludes access to the package\u2019s public classes, fields, and methods<br>\u200a\u2014\u200aExcludes access to anything with private, protected, or package access<br>\u200a\u2014\u200aExcludes access from any module not specified</p></li>\n<li><p>Use a specifies a comma-separated list to specify many modules to export to.</p></li>\n<li><p>This is known as a qualified export.</p></li>\n</ul>\n<pre><code>module A {\n    exports pkgA to B, C;\n}</code></pre>\n<h3>requires Module Directive</h3>\n<ul>\n<li><p>Declares the module is dependent on another module<br>\u200a\u2014\u200aOnly exported packages are readable by the requiring module.<br>\u200a\u2014\u200aPackages that aren\u2019t exported aren\u2019t readable.<br>\u200a\u2014\u200aAnything nonpublic is not readable, even from exported packages.</p></li>\n<li><p>Classes within the current module may require a class, instance, or method written in another module.</p></li>\n</ul>\n<pre><code>module B {\n    requires A;\n}</code></pre>\n<h3><strong>Example</strong></h3>\n<pre><code>package pkgA;</code></pre>\n<pre><code>public class ClassA{\n  public int yearPublic = 2001;\n  protected int yearProtected = 2002;\n  int yearPackage = 2003;\n  private int yearPrivate = 2004;\n}</code></pre>\n<pre><code>module A {\n    exports pkgA;\n}</code></pre>\n<pre><code>module B {\n   requires A;\n}</code></pre>\n<pre><code>package pkgB;</code></pre>\n<pre><code>import pkgA.ClassA; </code></pre>\n<pre><code>public class NewMain{\n  public static void main(String[] args){\n    ClassA test = new ClassA();\n     System.out.println(test.yearPublic); //Yes\n     System.out.println(test.yearProtected); //No\n     System.out.println(test.yearPackage); //No\n     System.out.println(test.yearPrivate); //No\n}}</code></pre>\n<h3>requires transitive Module Directive</h3>\n<ul>\n<li><p>Transitivity allows readability up the requirement chain.</p></li>\n<li><p>Anything requiring the current module has access to:<br>\u200a\u2014\u200aPackages exported by the current module<br>\u200a\u2014\u200aPackages exported by anything the current module requires transitively</p></li>\n<li><p>Known as \u201cimplied readability\u201d</p></li>\n</ul>\n<h3>Example</h3>\n<pre><code>module C{\n  exports pkgC;\n}\n\n</code></pre>\n<pre><code>package pkgC;</code></pre>\n<pre><code>public class ClassC {\n   public static String transitiveVar;\n   transitiveVar = \"From C\";\n}\n\n</code></pre>\n<pre><code>module A{\n  requires transitive C;\n  exports pkgA to B;\n}\n\n</code></pre>\n<pre><code>module B {\n   requires A;\n}\n\n</code></pre>\n<pre><code>package pkgB;</code></pre>\n<pre><code>import pkgA.ClassA;\nimport pkgC.ClassC;</code></pre>\n<pre><code>public class NewMain{\n  public static void main(String[] args){\n    ClassA test = new ClassA();\n    System.out.println(test.yearPublic);\n    System.out.println(ClassC.transitiveVar);\n}\n}</code></pre>\n<h3>The Base Module java.base</h3>\n<ul>\n<li><p>The base module exports all of the platform\u2019s core packages.</p></li>\n<li><p>Every module depends on <strong>java.base</strong>.</p></li>\n<li><p><strong>java.base</strong> doesn\u2019t depend on any other modules.</p></li>\n<li><p>The<strong> java.base</strong> module reference is implicitly included in all other modules.</p></li>\n</ul>\n<pre><code>// module-info.java</code></pre>\n<pre><code>module java.base{\n  exports java.lang;\n  exports java.io;\n  exports java.net;\n  exports java.util;\n}</code></pre>\n<pre><code>module A{\n  requires java.base;   // implied\n  requires java.logging;\n  requires transitive C;\n  exports pkgA to B;\n}</code></pre>\n<h3><strong>Summary of\u00a0Keywords</strong></h3>\n<p><strong>Keywords and Syntax with Description</strong></p>\n<ol>\n<li><p><strong>export &lt;package&gt;</strong><br>\u200a\u2014\u200aDeclares which package is eligible to be read.</p></li>\n<li><p><strong>export &lt;package&gt; to &lt;module&gt;<br></strong>\u200a\u2014\u200aDeclares which package is eligible to be read by a specific module</p></li>\n<li><p><strong>requires &lt;module&gt;<br>\u200a</strong>\u2014\u200aSpecifies another module to read from</p></li>\n<li><p><strong>requires transitive &lt;module&gt;<br>\u200a</strong>\u2014\u200aSpecifies another module to read from. The relationship is transitive where indirect. access is given to modules requiring the current module.</p></li>\n</ol>\n<ul>\n<li><p>These are restricted keywords</p></li>\n<li><p>Their creation won\u2019t break existing code.</p></li>\n<li><p>They\u2019re only available in the context of the <strong>module-info</strong> class.</p></li>\n</ul>\n<p>If you have questions or comments about this let me know in the comments below. You can view the full code here:</p>\n<p><strong><a href=\"https://github.com/zsanjay/Java-9-Modules\" title=\"https://github.com/zsanjay/Java-9-Modules\">GitHub - zsanjay/Java-9-Modules</a></strong><a href=\"https://github.com/zsanjay/Java-9-Modules\" title=\"https://github.com/zsanjay/Java-9-Modules\"><br></a><em><a href=\"https://github.com/zsanjay/Java-9-Modules\" title=\"https://github.com/zsanjay/Java-9-Modules\">Contribute to zsanjay/Java-9-Modules development by creating an account on GitHub.</a></em><a href=\"https://github.com/zsanjay/Java-9-Modules\" title=\"https://github.com/zsanjay/Java-9-Modules\">github.com</a></p>\n<p>Thanks for reading this blog. Happy Learning!!!</p>\n","enclosure":{"link":"https://substack-post-media.s3.amazonaws.com/public/images/4d023193-a48a-412c-9808-8798c438d419_518x180.png","type":"image/jpeg"},"categories":[]}]}